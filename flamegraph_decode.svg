<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="117271"><g><title>interpack`DYLD-STUB$$free (202 samples, 0.17%)</title><rect x="0.0000%" y="181" width="0.1723%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="202"/><text x="0.2500%" y="191.50"></text></g><g><title>interpack`__rdl_dealloc (1,797 samples, 1.53%)</title><rect x="0.1723%" y="181" width="1.5323%" height="15" fill="rgb(217,0,24)" fg:x="202" fg:w="1797"/><text x="0.4223%" y="191.50"></text></g><g><title>interpack`__rust_dealloc (250 samples, 0.21%)</title><rect x="1.7046%" y="181" width="0.2132%" height="15" fill="rgb(221,193,54)" fg:x="1999" fg:w="250"/><text x="1.9546%" y="191.50"></text></g><g><title>interpack`alloc::fmt::format::format_inner (326 samples, 0.28%)</title><rect x="1.9178%" y="181" width="0.2780%" height="15" fill="rgb(248,212,6)" fg:x="2249" fg:w="326"/><text x="2.1678%" y="191.50"></text></g><g><title>interpack`__rdl_dealloc (38 samples, 0.03%)</title><rect x="31.7197%" y="165" width="0.0324%" height="15" fill="rgb(208,68,35)" fg:x="37198" fg:w="38"/><text x="31.9697%" y="175.50"></text></g><g><title>interpack`&lt;&amp;T as core::fmt::Binary&gt;::fmt (619 samples, 0.53%)</title><rect x="33.9769%" y="149" width="0.5278%" height="15" fill="rgb(232,128,0)" fg:x="39845" fg:w="619"/><text x="34.2269%" y="159.50"></text></g><g><title>interpack`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (246 samples, 0.21%)</title><rect x="34.5047%" y="149" width="0.2098%" height="15" fill="rgb(207,160,47)" fg:x="40464" fg:w="246"/><text x="34.7547%" y="159.50"></text></g><g><title>interpack`&lt;&amp;T as core::fmt::Binary&gt;::fmt (410 samples, 0.35%)</title><rect x="39.2015%" y="133" width="0.3496%" height="15" fill="rgb(228,23,34)" fg:x="45972" fg:w="410"/><text x="39.4515%" y="143.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (79 samples, 0.07%)</title><rect x="39.5511%" y="133" width="0.0674%" height="15" fill="rgb(218,30,26)" fg:x="46382" fg:w="79"/><text x="39.8011%" y="143.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral (742 samples, 0.63%)</title><rect x="39.6185%" y="133" width="0.6327%" height="15" fill="rgb(220,122,19)" fg:x="46461" fg:w="742"/><text x="39.8685%" y="143.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (671 samples, 0.57%)</title><rect x="48.8330%" y="117" width="0.5722%" height="15" fill="rgb(250,228,42)" fg:x="57267" fg:w="671"/><text x="49.0830%" y="127.50"></text></g><g><title>interpack`__rdl_alloc (70 samples, 0.06%)</title><rect x="51.2249%" y="85" width="0.0597%" height="15" fill="rgb(240,193,28)" fg:x="60072" fg:w="70"/><text x="51.4749%" y="95.50"></text></g><g><title>interpack`__rust_alloc (213 samples, 0.18%)</title><rect x="51.2846%" y="85" width="0.1816%" height="15" fill="rgb(216,20,37)" fg:x="60142" fg:w="213"/><text x="51.5346%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e12 (17 samples, 0.01%)</title><rect x="51.7724%" y="69" width="0.0145%" height="15" fill="rgb(206,188,39)" fg:x="60714" fg:w="17"/><text x="52.0224%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e18 (25 samples, 0.02%)</title><rect x="51.7894%" y="69" width="0.0213%" height="15" fill="rgb(217,207,13)" fg:x="60734" fg:w="25"/><text x="52.0394%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e1a (25 samples, 0.02%)</title><rect x="51.8108%" y="69" width="0.0213%" height="15" fill="rgb(231,73,38)" fg:x="60759" fg:w="25"/><text x="52.0608%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e1b (65 samples, 0.06%)</title><rect x="51.8321%" y="69" width="0.0554%" height="15" fill="rgb(225,20,46)" fg:x="60784" fg:w="65"/><text x="52.0821%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e1f (15 samples, 0.01%)</title><rect x="51.8875%" y="69" width="0.0128%" height="15" fill="rgb(210,31,41)" fg:x="60849" fg:w="15"/><text x="52.1375%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e31 (22 samples, 0.02%)</title><rect x="51.9071%" y="69" width="0.0188%" height="15" fill="rgb(221,200,47)" fg:x="60872" fg:w="22"/><text x="52.1571%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e35 (21 samples, 0.02%)</title><rect x="51.9259%" y="69" width="0.0179%" height="15" fill="rgb(226,26,5)" fg:x="60894" fg:w="21"/><text x="52.1759%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e42 (76 samples, 0.06%)</title><rect x="51.9438%" y="69" width="0.0648%" height="15" fill="rgb(249,33,26)" fg:x="60915" fg:w="76"/><text x="52.1938%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e49 (21 samples, 0.02%)</title><rect x="52.0112%" y="69" width="0.0179%" height="15" fill="rgb(235,183,28)" fg:x="60994" fg:w="21"/><text x="52.2612%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e4c (12 samples, 0.01%)</title><rect x="52.0291%" y="69" width="0.0102%" height="15" fill="rgb(221,5,38)" fg:x="61015" fg:w="12"/><text x="52.2791%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e59 (15 samples, 0.01%)</title><rect x="52.0461%" y="69" width="0.0128%" height="15" fill="rgb(247,18,42)" fg:x="61035" fg:w="15"/><text x="52.2961%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e5d (435 samples, 0.37%)</title><rect x="52.0589%" y="69" width="0.3709%" height="15" fill="rgb(241,131,45)" fg:x="61050" fg:w="435"/><text x="52.3089%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e63 (87 samples, 0.07%)</title><rect x="52.4298%" y="69" width="0.0742%" height="15" fill="rgb(249,31,29)" fg:x="61485" fg:w="87"/><text x="52.6798%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e67 (2,134 samples, 1.82%)</title><rect x="52.5040%" y="69" width="1.8197%" height="15" fill="rgb(225,111,53)" fg:x="61572" fg:w="2134"/><text x="52.7540%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e6b (177 samples, 0.15%)</title><rect x="54.3237%" y="69" width="0.1509%" height="15" fill="rgb(238,160,17)" fg:x="63706" fg:w="177"/><text x="54.5737%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e79 (129 samples, 0.11%)</title><rect x="54.4781%" y="69" width="0.1100%" height="15" fill="rgb(214,148,48)" fg:x="63887" fg:w="129"/><text x="54.7281%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e84 (476 samples, 0.41%)</title><rect x="54.5881%" y="69" width="0.4059%" height="15" fill="rgb(232,36,49)" fg:x="64016" fg:w="476"/><text x="54.8381%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e89 (125 samples, 0.11%)</title><rect x="55.0017%" y="69" width="0.1066%" height="15" fill="rgb(209,103,24)" fg:x="64501" fg:w="125"/><text x="55.2517%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e93 (124 samples, 0.11%)</title><rect x="55.1100%" y="69" width="0.1057%" height="15" fill="rgb(229,88,8)" fg:x="64628" fg:w="124"/><text x="55.3600%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e9a (400 samples, 0.34%)</title><rect x="55.2242%" y="69" width="0.3411%" height="15" fill="rgb(213,181,19)" fg:x="64762" fg:w="400"/><text x="55.4742%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ebb (103 samples, 0.09%)</title><rect x="55.5730%" y="69" width="0.0878%" height="15" fill="rgb(254,191,54)" fg:x="65171" fg:w="103"/><text x="55.8230%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ebe (47 samples, 0.04%)</title><rect x="55.6608%" y="69" width="0.0401%" height="15" fill="rgb(241,83,37)" fg:x="65274" fg:w="47"/><text x="55.9108%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ec2 (89 samples, 0.08%)</title><rect x="55.7009%" y="69" width="0.0759%" height="15" fill="rgb(233,36,39)" fg:x="65321" fg:w="89"/><text x="55.9509%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ec5 (121 samples, 0.10%)</title><rect x="55.7768%" y="69" width="0.1032%" height="15" fill="rgb(226,3,54)" fg:x="65410" fg:w="121"/><text x="56.0268%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ed6 (12 samples, 0.01%)</title><rect x="55.8808%" y="69" width="0.0102%" height="15" fill="rgb(245,192,40)" fg:x="65532" fg:w="12"/><text x="56.1308%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ee9 (131 samples, 0.11%)</title><rect x="55.8979%" y="69" width="0.1117%" height="15" fill="rgb(238,167,29)" fg:x="65552" fg:w="131"/><text x="56.1479%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8efb (48 samples, 0.04%)</title><rect x="56.0104%" y="69" width="0.0409%" height="15" fill="rgb(232,182,51)" fg:x="65684" fg:w="48"/><text x="56.2604%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f02 (57 samples, 0.05%)</title><rect x="56.0590%" y="69" width="0.0486%" height="15" fill="rgb(231,60,39)" fg:x="65741" fg:w="57"/><text x="56.3090%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f09 (50 samples, 0.04%)</title><rect x="56.1076%" y="69" width="0.0426%" height="15" fill="rgb(208,69,12)" fg:x="65798" fg:w="50"/><text x="56.3576%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f0d (17 samples, 0.01%)</title><rect x="56.1503%" y="69" width="0.0145%" height="15" fill="rgb(235,93,37)" fg:x="65848" fg:w="17"/><text x="56.4003%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f16 (58 samples, 0.05%)</title><rect x="56.1733%" y="69" width="0.0495%" height="15" fill="rgb(213,116,39)" fg:x="65875" fg:w="58"/><text x="56.4233%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f1c (42 samples, 0.04%)</title><rect x="56.2228%" y="69" width="0.0358%" height="15" fill="rgb(222,207,29)" fg:x="65933" fg:w="42"/><text x="56.4728%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f1f (51 samples, 0.04%)</title><rect x="56.2586%" y="69" width="0.0435%" height="15" fill="rgb(206,96,30)" fg:x="65975" fg:w="51"/><text x="56.5086%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f27 (15 samples, 0.01%)</title><rect x="56.3021%" y="69" width="0.0128%" height="15" fill="rgb(218,138,4)" fg:x="66026" fg:w="15"/><text x="56.5521%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f33 (19 samples, 0.02%)</title><rect x="56.3183%" y="69" width="0.0162%" height="15" fill="rgb(250,191,14)" fg:x="66045" fg:w="19"/><text x="56.5683%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f39 (20 samples, 0.02%)</title><rect x="56.3345%" y="69" width="0.0171%" height="15" fill="rgb(239,60,40)" fg:x="66064" fg:w="20"/><text x="56.5845%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f40 (21 samples, 0.02%)</title><rect x="56.3515%" y="69" width="0.0179%" height="15" fill="rgb(206,27,48)" fg:x="66084" fg:w="21"/><text x="56.6015%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f43 (46 samples, 0.04%)</title><rect x="56.3694%" y="69" width="0.0392%" height="15" fill="rgb(225,35,8)" fg:x="66105" fg:w="46"/><text x="56.6194%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f49 (60 samples, 0.05%)</title><rect x="56.4087%" y="69" width="0.0512%" height="15" fill="rgb(250,213,24)" fg:x="66151" fg:w="60"/><text x="56.6587%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f4e (879 samples, 0.75%)</title><rect x="56.4598%" y="69" width="0.7495%" height="15" fill="rgb(247,123,22)" fg:x="66211" fg:w="879"/><text x="56.7098%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f50 (56 samples, 0.05%)</title><rect x="57.2094%" y="69" width="0.0478%" height="15" fill="rgb(231,138,38)" fg:x="67090" fg:w="56"/><text x="57.4594%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f52 (15 samples, 0.01%)</title><rect x="57.2571%" y="69" width="0.0128%" height="15" fill="rgb(231,145,46)" fg:x="67146" fg:w="15"/><text x="57.5071%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f59 (15 samples, 0.01%)</title><rect x="57.2716%" y="69" width="0.0128%" height="15" fill="rgb(251,118,11)" fg:x="67163" fg:w="15"/><text x="57.5216%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f5e (27 samples, 0.02%)</title><rect x="57.2904%" y="69" width="0.0230%" height="15" fill="rgb(217,147,25)" fg:x="67185" fg:w="27"/><text x="57.5404%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f62 (79 samples, 0.07%)</title><rect x="57.3134%" y="69" width="0.0674%" height="15" fill="rgb(247,81,37)" fg:x="67212" fg:w="79"/><text x="57.5634%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f65 (66 samples, 0.06%)</title><rect x="57.3808%" y="69" width="0.0563%" height="15" fill="rgb(209,12,38)" fg:x="67291" fg:w="66"/><text x="57.6308%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f68 (76 samples, 0.06%)</title><rect x="57.4370%" y="69" width="0.0648%" height="15" fill="rgb(227,1,9)" fg:x="67357" fg:w="76"/><text x="57.6870%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f72 (355 samples, 0.30%)</title><rect x="57.5044%" y="69" width="0.3027%" height="15" fill="rgb(248,47,43)" fg:x="67436" fg:w="355"/><text x="57.7544%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f81 (65 samples, 0.06%)</title><rect x="57.8165%" y="69" width="0.0554%" height="15" fill="rgb(221,10,30)" fg:x="67802" fg:w="65"/><text x="58.0665%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f84 (83 samples, 0.07%)</title><rect x="57.8719%" y="69" width="0.0708%" height="15" fill="rgb(210,229,1)" fg:x="67867" fg:w="83"/><text x="58.1219%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f8a (79 samples, 0.07%)</title><rect x="57.9427%" y="69" width="0.0674%" height="15" fill="rgb(222,148,37)" fg:x="67950" fg:w="79"/><text x="58.1927%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f8f (1,342 samples, 1.14%)</title><rect x="58.0101%" y="69" width="1.1444%" height="15" fill="rgb(234,67,33)" fg:x="68029" fg:w="1342"/><text x="58.2601%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8fe9 (50 samples, 0.04%)</title><rect x="59.1561%" y="69" width="0.0426%" height="15" fill="rgb(247,98,35)" fg:x="69373" fg:w="50"/><text x="59.4061%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b902e (73 samples, 0.06%)</title><rect x="59.2022%" y="69" width="0.0622%" height="15" fill="rgb(247,138,52)" fg:x="69427" fg:w="73"/><text x="59.4522%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b903e (42 samples, 0.04%)</title><rect x="59.2704%" y="69" width="0.0358%" height="15" fill="rgb(213,79,30)" fg:x="69507" fg:w="42"/><text x="59.5204%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b9040 (132 samples, 0.11%)</title><rect x="59.3062%" y="69" width="0.1126%" height="15" fill="rgb(246,177,23)" fg:x="69549" fg:w="132"/><text x="59.5562%" y="79.50"></text></g><g><title>interpack`alloc::raw_vec::finish_grow (9,386 samples, 8.00%)</title><rect x="51.4663%" y="85" width="8.0037%" height="15" fill="rgb(230,62,27)" fg:x="60355" fg:w="9386"/><text x="51.7163%" y="95.50">interpack`a..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154b9067 (52 samples, 0.04%)</title><rect x="59.4256%" y="69" width="0.0443%" height="15" fill="rgb(216,154,8)" fg:x="69689" fg:w="52"/><text x="59.6756%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dd0 (258 samples, 0.22%)</title><rect x="59.4699%" y="85" width="0.2200%" height="15" fill="rgb(244,35,45)" fg:x="69741" fg:w="258"/><text x="59.7199%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dda (36 samples, 0.03%)</title><rect x="59.6985%" y="85" width="0.0307%" height="15" fill="rgb(251,115,12)" fg:x="70009" fg:w="36"/><text x="59.9485%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e0e (81 samples, 0.07%)</title><rect x="59.7300%" y="85" width="0.0691%" height="15" fill="rgb(240,54,50)" fg:x="70046" fg:w="81"/><text x="59.9800%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b903f (99 samples, 0.08%)</title><rect x="59.7991%" y="85" width="0.0844%" height="15" fill="rgb(233,84,52)" fg:x="70127" fg:w="99"/><text x="60.0491%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3647 (41 samples, 0.03%)</title><rect x="59.8835%" y="85" width="0.0350%" height="15" fill="rgb(207,117,47)" fg:x="70226" fg:w="41"/><text x="60.1335%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e364e (96 samples, 0.08%)</title><rect x="59.9185%" y="85" width="0.0819%" height="15" fill="rgb(249,43,39)" fg:x="70267" fg:w="96"/><text x="60.1685%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3650 (63 samples, 0.05%)</title><rect x="60.0003%" y="85" width="0.0537%" height="15" fill="rgb(209,38,44)" fg:x="70363" fg:w="63"/><text x="60.2503%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3658 (76 samples, 0.06%)</title><rect x="60.0541%" y="85" width="0.0648%" height="15" fill="rgb(236,212,23)" fg:x="70426" fg:w="76"/><text x="60.3041%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e365a (33 samples, 0.03%)</title><rect x="60.1189%" y="85" width="0.0281%" height="15" fill="rgb(242,79,21)" fg:x="70502" fg:w="33"/><text x="60.3689%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3661 (16 samples, 0.01%)</title><rect x="60.1470%" y="85" width="0.0136%" height="15" fill="rgb(211,96,35)" fg:x="70535" fg:w="16"/><text x="60.3970%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3664 (192 samples, 0.16%)</title><rect x="60.1607%" y="85" width="0.1637%" height="15" fill="rgb(253,215,40)" fg:x="70551" fg:w="192"/><text x="60.4107%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3675 (132 samples, 0.11%)</title><rect x="60.3286%" y="85" width="0.1126%" height="15" fill="rgb(211,81,21)" fg:x="70748" fg:w="132"/><text x="60.5786%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3677 (12 samples, 0.01%)</title><rect x="60.4412%" y="85" width="0.0102%" height="15" fill="rgb(208,190,38)" fg:x="70880" fg:w="12"/><text x="60.6912%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e367b (474 samples, 0.40%)</title><rect x="60.4514%" y="85" width="0.4042%" height="15" fill="rgb(235,213,38)" fg:x="70892" fg:w="474"/><text x="60.7014%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e367d (111 samples, 0.09%)</title><rect x="60.8556%" y="85" width="0.0947%" height="15" fill="rgb(237,122,38)" fg:x="71366" fg:w="111"/><text x="61.1056%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3691 (97 samples, 0.08%)</title><rect x="60.9554%" y="85" width="0.0827%" height="15" fill="rgb(244,218,35)" fg:x="71483" fg:w="97"/><text x="61.2054%" y="95.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12,671 samples, 10.80%)</title><rect x="50.2562%" y="101" width="10.8049%" height="15" fill="rgb(240,68,47)" fg:x="58936" fg:w="12671"/><text x="50.5062%" y="111.50">interpack`alloc:..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3696 (27 samples, 0.02%)</title><rect x="61.0381%" y="85" width="0.0230%" height="15" fill="rgb(210,16,53)" fg:x="71580" fg:w="27"/><text x="61.2881%" y="95.50"></text></g><g><title>interpack`alloc::raw_vec::finish_grow (131 samples, 0.11%)</title><rect x="61.0611%" y="101" width="0.1117%" height="15" fill="rgb(235,124,12)" fg:x="71607" fg:w="131"/><text x="61.3111%" y="111.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (14,133 samples, 12.05%)</title><rect x="49.4052%" y="117" width="12.0516%" height="15" fill="rgb(224,169,11)" fg:x="57938" fg:w="14133"/><text x="49.6552%" y="127.50">interpack`&lt;alloc::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (333 samples, 0.28%)</title><rect x="61.1728%" y="101" width="0.2840%" height="15" fill="rgb(250,166,2)" fg:x="71738" fg:w="333"/><text x="61.4228%" y="111.50"></text></g><g><title>interpack`DYLD-STUB$$memcpy (222 samples, 0.19%)</title><rect x="61.4568%" y="117" width="0.1893%" height="15" fill="rgb(242,216,29)" fg:x="72071" fg:w="222"/><text x="61.7068%" y="127.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (209 samples, 0.18%)</title><rect x="61.6461%" y="117" width="0.1782%" height="15" fill="rgb(230,116,27)" fg:x="72293" fg:w="209"/><text x="61.8961%" y="127.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral (4,493 samples, 3.83%)</title><rect x="61.8243%" y="117" width="3.8313%" height="15" fill="rgb(228,99,48)" fg:x="72502" fg:w="4493"/><text x="62.0743%" y="127.50">inte..</text></g><g><title>interpack`core::fmt::Formatter::pad_integral::write_prefix (411 samples, 0.35%)</title><rect x="65.6556%" y="117" width="0.3505%" height="15" fill="rgb(253,11,6)" fg:x="76995" fg:w="411"/><text x="65.9056%" y="127.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (218 samples, 0.19%)</title><rect x="66.1621%" y="85" width="0.1859%" height="15" fill="rgb(247,143,39)" fg:x="77589" fg:w="218"/><text x="66.4121%" y="95.50"></text></g><g><title>interpack`__rdl_alloc (84 samples, 0.07%)</title><rect x="68.5600%" y="53" width="0.0716%" height="15" fill="rgb(236,97,10)" fg:x="80401" fg:w="84"/><text x="68.8100%" y="63.50"></text></g><g><title>interpack`__rust_alloc (214 samples, 0.18%)</title><rect x="68.6316%" y="53" width="0.1825%" height="15" fill="rgb(233,208,19)" fg:x="80485" fg:w="214"/><text x="68.8816%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e18 (18 samples, 0.02%)</title><rect x="69.2132%" y="37" width="0.0153%" height="15" fill="rgb(216,164,2)" fg:x="81167" fg:w="18"/><text x="69.4632%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e1b (84 samples, 0.07%)</title><rect x="69.2379%" y="37" width="0.0716%" height="15" fill="rgb(220,129,5)" fg:x="81196" fg:w="84"/><text x="69.4879%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e35 (15 samples, 0.01%)</title><rect x="69.3317%" y="37" width="0.0128%" height="15" fill="rgb(242,17,10)" fg:x="81306" fg:w="15"/><text x="69.5817%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e42 (104 samples, 0.09%)</title><rect x="69.3471%" y="37" width="0.0887%" height="15" fill="rgb(242,107,0)" fg:x="81324" fg:w="104"/><text x="69.5971%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e53 (12 samples, 0.01%)</title><rect x="69.4468%" y="37" width="0.0102%" height="15" fill="rgb(251,28,31)" fg:x="81441" fg:w="12"/><text x="69.6968%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e59 (15 samples, 0.01%)</title><rect x="69.4571%" y="37" width="0.0128%" height="15" fill="rgb(233,223,10)" fg:x="81453" fg:w="15"/><text x="69.7071%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e5d (493 samples, 0.42%)</title><rect x="69.4699%" y="37" width="0.4204%" height="15" fill="rgb(215,21,27)" fg:x="81468" fg:w="493"/><text x="69.7199%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e63 (112 samples, 0.10%)</title><rect x="69.8903%" y="37" width="0.0955%" height="15" fill="rgb(232,23,21)" fg:x="81961" fg:w="112"/><text x="70.1403%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e67 (2,378 samples, 2.03%)</title><rect x="69.9858%" y="37" width="2.0278%" height="15" fill="rgb(244,5,23)" fg:x="82073" fg:w="2378"/><text x="70.2358%" y="47.50">l..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e6b (184 samples, 0.16%)</title><rect x="72.0135%" y="37" width="0.1569%" height="15" fill="rgb(226,81,46)" fg:x="84451" fg:w="184"/><text x="72.2635%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e79 (120 samples, 0.10%)</title><rect x="72.1824%" y="37" width="0.1023%" height="15" fill="rgb(247,70,30)" fg:x="84649" fg:w="120"/><text x="72.4324%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e84 (515 samples, 0.44%)</title><rect x="72.2856%" y="37" width="0.4392%" height="15" fill="rgb(212,68,19)" fg:x="84770" fg:w="515"/><text x="72.5356%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e89 (127 samples, 0.11%)</title><rect x="72.7324%" y="37" width="0.1083%" height="15" fill="rgb(240,187,13)" fg:x="85294" fg:w="127"/><text x="72.9824%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e93 (117 samples, 0.10%)</title><rect x="72.8432%" y="37" width="0.0998%" height="15" fill="rgb(223,113,26)" fg:x="85424" fg:w="117"/><text x="73.0932%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e97 (14 samples, 0.01%)</title><rect x="72.9430%" y="37" width="0.0119%" height="15" fill="rgb(206,192,2)" fg:x="85541" fg:w="14"/><text x="73.1930%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e9a (429 samples, 0.37%)</title><rect x="72.9550%" y="37" width="0.3658%" height="15" fill="rgb(241,108,4)" fg:x="85555" fg:w="429"/><text x="73.2050%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ebb (142 samples, 0.12%)</title><rect x="73.3276%" y="37" width="0.1211%" height="15" fill="rgb(247,173,49)" fg:x="85992" fg:w="142"/><text x="73.5776%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ebe (56 samples, 0.05%)</title><rect x="73.4487%" y="37" width="0.0478%" height="15" fill="rgb(224,114,35)" fg:x="86134" fg:w="56"/><text x="73.6987%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ec2 (102 samples, 0.09%)</title><rect x="73.4964%" y="37" width="0.0870%" height="15" fill="rgb(245,159,27)" fg:x="86190" fg:w="102"/><text x="73.7464%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ec5 (129 samples, 0.11%)</title><rect x="73.5834%" y="37" width="0.1100%" height="15" fill="rgb(245,172,44)" fg:x="86292" fg:w="129"/><text x="73.8334%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ee9 (142 samples, 0.12%)</title><rect x="73.7105%" y="37" width="0.1211%" height="15" fill="rgb(236,23,11)" fg:x="86441" fg:w="142"/><text x="73.9605%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8efb (43 samples, 0.04%)</title><rect x="73.8324%" y="37" width="0.0367%" height="15" fill="rgb(205,117,38)" fg:x="86584" fg:w="43"/><text x="74.0824%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f02 (90 samples, 0.08%)</title><rect x="73.8759%" y="37" width="0.0767%" height="15" fill="rgb(237,72,25)" fg:x="86635" fg:w="90"/><text x="74.1259%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f09 (82 samples, 0.07%)</title><rect x="73.9526%" y="37" width="0.0699%" height="15" fill="rgb(244,70,9)" fg:x="86725" fg:w="82"/><text x="74.2026%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f10 (16 samples, 0.01%)</title><rect x="74.0319%" y="37" width="0.0136%" height="15" fill="rgb(217,125,39)" fg:x="86818" fg:w="16"/><text x="74.2819%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f16 (36 samples, 0.03%)</title><rect x="74.0456%" y="37" width="0.0307%" height="15" fill="rgb(235,36,10)" fg:x="86834" fg:w="36"/><text x="74.2956%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f1c (53 samples, 0.05%)</title><rect x="74.0763%" y="37" width="0.0452%" height="15" fill="rgb(251,123,47)" fg:x="86870" fg:w="53"/><text x="74.3263%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f1f (53 samples, 0.05%)</title><rect x="74.1215%" y="37" width="0.0452%" height="15" fill="rgb(221,13,13)" fg:x="86923" fg:w="53"/><text x="74.3715%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f39 (29 samples, 0.02%)</title><rect x="74.1829%" y="37" width="0.0247%" height="15" fill="rgb(238,131,9)" fg:x="86995" fg:w="29"/><text x="74.4329%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f40 (25 samples, 0.02%)</title><rect x="74.2076%" y="37" width="0.0213%" height="15" fill="rgb(211,50,8)" fg:x="87024" fg:w="25"/><text x="74.4576%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f43 (41 samples, 0.03%)</title><rect x="74.2289%" y="37" width="0.0350%" height="15" fill="rgb(245,182,24)" fg:x="87049" fg:w="41"/><text x="74.4789%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f49 (61 samples, 0.05%)</title><rect x="74.2639%" y="37" width="0.0520%" height="15" fill="rgb(242,14,37)" fg:x="87090" fg:w="61"/><text x="74.5139%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f4e (1,035 samples, 0.88%)</title><rect x="74.3159%" y="37" width="0.8826%" height="15" fill="rgb(246,228,12)" fg:x="87151" fg:w="1035"/><text x="74.5659%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f50 (77 samples, 0.07%)</title><rect x="75.1985%" y="37" width="0.0657%" height="15" fill="rgb(213,55,15)" fg:x="88186" fg:w="77"/><text x="75.4485%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f52 (25 samples, 0.02%)</title><rect x="75.2641%" y="37" width="0.0213%" height="15" fill="rgb(209,9,3)" fg:x="88263" fg:w="25"/><text x="75.5141%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f55 (14 samples, 0.01%)</title><rect x="75.2854%" y="37" width="0.0119%" height="15" fill="rgb(230,59,30)" fg:x="88288" fg:w="14"/><text x="75.5354%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f59 (12 samples, 0.01%)</title><rect x="75.2974%" y="37" width="0.0102%" height="15" fill="rgb(209,121,21)" fg:x="88302" fg:w="12"/><text x="75.5474%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f5e (41 samples, 0.03%)</title><rect x="75.3153%" y="37" width="0.0350%" height="15" fill="rgb(220,109,13)" fg:x="88323" fg:w="41"/><text x="75.5653%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f62 (99 samples, 0.08%)</title><rect x="75.3503%" y="37" width="0.0844%" height="15" fill="rgb(232,18,1)" fg:x="88364" fg:w="99"/><text x="75.6003%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f65 (73 samples, 0.06%)</title><rect x="75.4347%" y="37" width="0.0622%" height="15" fill="rgb(215,41,42)" fg:x="88463" fg:w="73"/><text x="75.6847%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f68 (71 samples, 0.06%)</title><rect x="75.4969%" y="37" width="0.0605%" height="15" fill="rgb(224,123,36)" fg:x="88536" fg:w="71"/><text x="75.7469%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f72 (396 samples, 0.34%)</title><rect x="75.5634%" y="37" width="0.3377%" height="15" fill="rgb(240,125,3)" fg:x="88614" fg:w="396"/><text x="75.8134%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f7a (17 samples, 0.01%)</title><rect x="75.9011%" y="37" width="0.0145%" height="15" fill="rgb(205,98,50)" fg:x="89010" fg:w="17"/><text x="76.1511%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f81 (82 samples, 0.07%)</title><rect x="75.9156%" y="37" width="0.0699%" height="15" fill="rgb(205,185,37)" fg:x="89027" fg:w="82"/><text x="76.1656%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f84 (69 samples, 0.06%)</title><rect x="75.9855%" y="37" width="0.0588%" height="15" fill="rgb(238,207,15)" fg:x="89109" fg:w="69"/><text x="76.2355%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f8a (75 samples, 0.06%)</title><rect x="76.0444%" y="37" width="0.0640%" height="15" fill="rgb(213,199,42)" fg:x="89178" fg:w="75"/><text x="76.2944%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f8f (1,360 samples, 1.16%)</title><rect x="76.1083%" y="37" width="1.1597%" height="15" fill="rgb(235,201,11)" fg:x="89253" fg:w="1360"/><text x="76.3583%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8fe9 (48 samples, 0.04%)</title><rect x="77.2723%" y="37" width="0.0409%" height="15" fill="rgb(207,46,11)" fg:x="90618" fg:w="48"/><text x="77.5223%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b902e (82 samples, 0.07%)</title><rect x="77.3158%" y="37" width="0.0699%" height="15" fill="rgb(241,35,35)" fg:x="90669" fg:w="82"/><text x="77.5658%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b903e (64 samples, 0.05%)</title><rect x="77.3908%" y="37" width="0.0546%" height="15" fill="rgb(243,32,47)" fg:x="90757" fg:w="64"/><text x="77.6408%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b9040 (104 samples, 0.09%)</title><rect x="77.4454%" y="37" width="0.0887%" height="15" fill="rgb(247,202,23)" fg:x="90821" fg:w="104"/><text x="77.6954%" y="47.50"></text></g><g><title>interpack`alloc::raw_vec::finish_grow (10,281 samples, 8.77%)</title><rect x="68.8141%" y="53" width="8.7669%" height="15" fill="rgb(219,102,11)" fg:x="80699" fg:w="10281"/><text x="69.0641%" y="63.50">interpack`al..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154b9067 (42 samples, 0.04%)</title><rect x="77.5452%" y="37" width="0.0358%" height="15" fill="rgb(243,110,44)" fg:x="90938" fg:w="42"/><text x="77.7952%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dd0 (285 samples, 0.24%)</title><rect x="77.5810%" y="53" width="0.2430%" height="15" fill="rgb(222,74,54)" fg:x="90980" fg:w="285"/><text x="77.8310%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dda (52 samples, 0.04%)</title><rect x="77.8334%" y="53" width="0.0443%" height="15" fill="rgb(216,99,12)" fg:x="91276" fg:w="52"/><text x="78.0834%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e0e (87 samples, 0.07%)</title><rect x="77.8786%" y="53" width="0.0742%" height="15" fill="rgb(226,22,26)" fg:x="91329" fg:w="87"/><text x="78.1286%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b903f (83 samples, 0.07%)</title><rect x="77.9553%" y="53" width="0.0708%" height="15" fill="rgb(217,163,10)" fg:x="91419" fg:w="83"/><text x="78.2053%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3647 (103 samples, 0.09%)</title><rect x="78.0261%" y="53" width="0.0878%" height="15" fill="rgb(213,25,53)" fg:x="91502" fg:w="103"/><text x="78.2761%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e364e (106 samples, 0.09%)</title><rect x="78.1139%" y="53" width="0.0904%" height="15" fill="rgb(252,105,26)" fg:x="91605" fg:w="106"/><text x="78.3639%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3650 (73 samples, 0.06%)</title><rect x="78.2043%" y="53" width="0.0622%" height="15" fill="rgb(220,39,43)" fg:x="91711" fg:w="73"/><text x="78.4543%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3658 (68 samples, 0.06%)</title><rect x="78.2666%" y="53" width="0.0580%" height="15" fill="rgb(229,68,48)" fg:x="91784" fg:w="68"/><text x="78.5166%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e365a (57 samples, 0.05%)</title><rect x="78.3246%" y="53" width="0.0486%" height="15" fill="rgb(252,8,32)" fg:x="91852" fg:w="57"/><text x="78.5746%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3661 (37 samples, 0.03%)</title><rect x="78.3732%" y="53" width="0.0316%" height="15" fill="rgb(223,20,43)" fg:x="91909" fg:w="37"/><text x="78.6232%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3664 (350 samples, 0.30%)</title><rect x="78.4047%" y="53" width="0.2985%" height="15" fill="rgb(229,81,49)" fg:x="91946" fg:w="350"/><text x="78.6547%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3675 (137 samples, 0.12%)</title><rect x="78.7066%" y="53" width="0.1168%" height="15" fill="rgb(236,28,36)" fg:x="92300" fg:w="137"/><text x="78.9566%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3677 (12 samples, 0.01%)</title><rect x="78.8234%" y="53" width="0.0102%" height="15" fill="rgb(249,185,26)" fg:x="92437" fg:w="12"/><text x="79.0734%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e367b (645 samples, 0.55%)</title><rect x="78.8336%" y="53" width="0.5500%" height="15" fill="rgb(249,174,33)" fg:x="92449" fg:w="645"/><text x="79.0836%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e367d (147 samples, 0.13%)</title><rect x="79.3836%" y="53" width="0.1254%" height="15" fill="rgb(233,201,37)" fg:x="93094" fg:w="147"/><text x="79.6336%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3691 (134 samples, 0.11%)</title><rect x="79.5158%" y="53" width="0.1143%" height="15" fill="rgb(221,78,26)" fg:x="93249" fg:w="134"/><text x="79.7658%" y="63.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14,317 samples, 12.21%)</title><rect x="67.4370%" y="69" width="12.2085%" height="15" fill="rgb(250,127,30)" fg:x="79084" fg:w="14317"/><text x="67.6870%" y="79.50">interpack`alloc::r..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3696 (18 samples, 0.02%)</title><rect x="79.6301%" y="53" width="0.0153%" height="15" fill="rgb(230,49,44)" fg:x="93383" fg:w="18"/><text x="79.8801%" y="63.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (16,135 samples, 13.76%)</title><rect x="66.0061%" y="101" width="13.7587%" height="15" fill="rgb(229,67,23)" fg:x="77406" fg:w="16135"/><text x="66.2561%" y="111.50">interpack`&lt;alloc::str..</text></g><g><title>interpack`alloc::string::String::push (15,734 samples, 13.42%)</title><rect x="66.3480%" y="85" width="13.4168%" height="15" fill="rgb(249,83,47)" fg:x="77807" fg:w="15734"/><text x="66.5980%" y="95.50">interpack`alloc::str..</text></g><g><title>interpack`alloc::raw_vec::finish_grow (140 samples, 0.12%)</title><rect x="79.6454%" y="69" width="0.1194%" height="15" fill="rgb(215,43,3)" fg:x="93401" fg:w="140"/><text x="79.8954%" y="79.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,590 samples, 1.36%)</title><rect x="79.7648%" y="101" width="1.3558%" height="15" fill="rgb(238,154,13)" fg:x="93541" fg:w="1590"/><text x="80.0148%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,021 samples, 0.87%)</title><rect x="80.2500%" y="85" width="0.8706%" height="15" fill="rgb(219,56,2)" fg:x="94110" fg:w="1021"/><text x="80.5000%" y="95.50"></text></g><g><title>interpack`DYLD-STUB$$memcpy (154 samples, 0.13%)</title><rect x="81.1207%" y="101" width="0.1313%" height="15" fill="rgb(233,0,4)" fg:x="95131" fg:w="154"/><text x="81.3707%" y="111.50"></text></g><g><title>interpack`alloc::string::String::push (682 samples, 0.58%)</title><rect x="81.2520%" y="101" width="0.5816%" height="15" fill="rgb(235,30,7)" fg:x="95285" fg:w="682"/><text x="81.5020%" y="111.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral::write_prefix (1,587 samples, 1.35%)</title><rect x="81.8335%" y="101" width="1.3533%" height="15" fill="rgb(250,79,13)" fg:x="95967" fg:w="1587"/><text x="82.0835%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (41 samples, 0.03%)</title><rect x="83.1868%" y="101" width="0.0350%" height="15" fill="rgb(211,146,34)" fg:x="97554" fg:w="41"/><text x="83.4368%" y="111.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral (20,298 samples, 17.31%)</title><rect x="66.0061%" y="117" width="17.3086%" height="15" fill="rgb(228,22,38)" fg:x="77406" fg:w="20298"/><text x="66.2561%" y="127.50">interpack`core::fmt::Format..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (109 samples, 0.09%)</title><rect x="83.2218%" y="101" width="0.0929%" height="15" fill="rgb(235,168,5)" fg:x="97595" fg:w="109"/><text x="83.4718%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (14 samples, 0.01%)</title><rect x="83.3147%" y="117" width="0.0119%" height="15" fill="rgb(221,155,16)" fg:x="97704" fg:w="14"/><text x="83.5647%" y="127.50"></text></g><g><title>interpack`alloc::fmt::format::format_inner (60,508 samples, 51.60%)</title><rect x="31.7521%" y="165" width="51.5967%" height="15" fill="rgb(215,215,53)" fg:x="37236" fg:w="60508"/><text x="32.0021%" y="175.50">interpack`alloc::fmt::format::format_inner</text></g><g><title>interpack`core::fmt::write (57,034 samples, 48.63%)</title><rect x="34.7145%" y="149" width="48.6344%" height="15" fill="rgb(223,4,10)" fg:x="40710" fg:w="57034"/><text x="34.9645%" y="159.50">interpack`core::fmt::write</text></g><g><title>interpack`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (50,541 samples, 43.10%)</title><rect x="40.2512%" y="133" width="43.0976%" height="15" fill="rgb(234,103,6)" fg:x="47203" fg:w="50541"/><text x="40.5012%" y="143.50">interpack`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (26 samples, 0.02%)</title><rect x="83.3267%" y="117" width="0.0222%" height="15" fill="rgb(227,97,0)" fg:x="97718" fg:w="26"/><text x="83.5767%" y="127.50"></text></g><g><title>interpack`core::fmt::write (279 samples, 0.24%)</title><rect x="83.3488%" y="165" width="0.2379%" height="15" fill="rgb(234,150,53)" fg:x="97744" fg:w="279"/><text x="83.5988%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da306 (66 samples, 0.06%)</title><rect x="83.5876%" y="165" width="0.0563%" height="15" fill="rgb(228,201,54)" fg:x="98024" fg:w="66"/><text x="83.8376%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da308 (71 samples, 0.06%)</title><rect x="83.6439%" y="165" width="0.0605%" height="15" fill="rgb(222,22,37)" fg:x="98090" fg:w="71"/><text x="83.8939%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da30a (101 samples, 0.09%)</title><rect x="83.7044%" y="165" width="0.0861%" height="15" fill="rgb(237,53,32)" fg:x="98161" fg:w="101"/><text x="83.9544%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da30d (72 samples, 0.06%)</title><rect x="83.7939%" y="165" width="0.0614%" height="15" fill="rgb(233,25,53)" fg:x="98266" fg:w="72"/><text x="84.0439%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da30e (17 samples, 0.01%)</title><rect x="83.8553%" y="165" width="0.0145%" height="15" fill="rgb(210,40,34)" fg:x="98338" fg:w="17"/><text x="84.1053%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da316 (83 samples, 0.07%)</title><rect x="83.8698%" y="165" width="0.0708%" height="15" fill="rgb(241,220,44)" fg:x="98355" fg:w="83"/><text x="84.1198%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da31f (58 samples, 0.05%)</title><rect x="83.9406%" y="165" width="0.0495%" height="15" fill="rgb(235,28,35)" fg:x="98438" fg:w="58"/><text x="84.1906%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da329 (84 samples, 0.07%)</title><rect x="83.9901%" y="165" width="0.0716%" height="15" fill="rgb(210,56,17)" fg:x="98496" fg:w="84"/><text x="84.2401%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da336 (75 samples, 0.06%)</title><rect x="84.0660%" y="165" width="0.0640%" height="15" fill="rgb(224,130,29)" fg:x="98585" fg:w="75"/><text x="84.3160%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da33f (17 samples, 0.01%)</title><rect x="84.1299%" y="165" width="0.0145%" height="15" fill="rgb(235,212,8)" fg:x="98660" fg:w="17"/><text x="84.3799%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da346 (24 samples, 0.02%)</title><rect x="84.1444%" y="165" width="0.0205%" height="15" fill="rgb(223,33,50)" fg:x="98677" fg:w="24"/><text x="84.3944%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da356 (100 samples, 0.09%)</title><rect x="84.1674%" y="165" width="0.0853%" height="15" fill="rgb(219,149,13)" fg:x="98704" fg:w="100"/><text x="84.4174%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da35f (60 samples, 0.05%)</title><rect x="84.2527%" y="165" width="0.0512%" height="15" fill="rgb(250,156,29)" fg:x="98804" fg:w="60"/><text x="84.5027%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da365 (75 samples, 0.06%)</title><rect x="84.3039%" y="165" width="0.0640%" height="15" fill="rgb(216,193,19)" fg:x="98864" fg:w="75"/><text x="84.5539%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da3f4 (67 samples, 0.06%)</title><rect x="84.3678%" y="165" width="0.0571%" height="15" fill="rgb(216,135,14)" fg:x="98939" fg:w="67"/><text x="84.6178%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da3ff (31 samples, 0.03%)</title><rect x="84.4420%" y="165" width="0.0264%" height="15" fill="rgb(241,47,5)" fg:x="99026" fg:w="31"/><text x="84.6920%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da405 (64 samples, 0.05%)</title><rect x="84.4685%" y="165" width="0.0546%" height="15" fill="rgb(233,42,35)" fg:x="99057" fg:w="64"/><text x="84.7185%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da407 (29 samples, 0.02%)</title><rect x="84.5230%" y="165" width="0.0247%" height="15" fill="rgb(231,13,6)" fg:x="99121" fg:w="29"/><text x="84.7730%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da40a (73 samples, 0.06%)</title><rect x="84.5478%" y="165" width="0.0622%" height="15" fill="rgb(207,181,40)" fg:x="99150" fg:w="73"/><text x="84.7978%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da411 (100 samples, 0.09%)</title><rect x="84.6100%" y="165" width="0.0853%" height="15" fill="rgb(254,173,49)" fg:x="99223" fg:w="100"/><text x="84.8600%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da415 (480 samples, 0.41%)</title><rect x="84.6953%" y="165" width="0.4093%" height="15" fill="rgb(221,1,38)" fg:x="99323" fg:w="480"/><text x="84.9453%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da418 (22 samples, 0.02%)</title><rect x="85.1046%" y="165" width="0.0188%" height="15" fill="rgb(206,124,46)" fg:x="99803" fg:w="22"/><text x="85.3546%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da429 (46 samples, 0.04%)</title><rect x="85.1276%" y="165" width="0.0392%" height="15" fill="rgb(249,21,11)" fg:x="99830" fg:w="46"/><text x="85.3776%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da437 (14 samples, 0.01%)</title><rect x="85.1728%" y="165" width="0.0119%" height="15" fill="rgb(222,201,40)" fg:x="99883" fg:w="14"/><text x="85.4228%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da43a (224 samples, 0.19%)</title><rect x="85.1847%" y="165" width="0.1910%" height="15" fill="rgb(235,61,29)" fg:x="99897" fg:w="224"/><text x="85.4347%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da43e (297 samples, 0.25%)</title><rect x="85.3758%" y="165" width="0.2533%" height="15" fill="rgb(219,207,3)" fg:x="100121" fg:w="297"/><text x="85.6258%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da440 (185 samples, 0.16%)</title><rect x="85.6290%" y="165" width="0.1578%" height="15" fill="rgb(222,56,46)" fg:x="100418" fg:w="185"/><text x="85.8790%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da446 (191 samples, 0.16%)</title><rect x="85.7868%" y="165" width="0.1629%" height="15" fill="rgb(239,76,54)" fg:x="100603" fg:w="191"/><text x="86.0368%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da44e (282 samples, 0.24%)</title><rect x="85.9496%" y="165" width="0.2405%" height="15" fill="rgb(231,124,27)" fg:x="100794" fg:w="282"/><text x="86.1996%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da452 (211 samples, 0.18%)</title><rect x="86.1901%" y="165" width="0.1799%" height="15" fill="rgb(249,195,6)" fg:x="101076" fg:w="211"/><text x="86.4401%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da45a (204 samples, 0.17%)</title><rect x="86.3700%" y="165" width="0.1740%" height="15" fill="rgb(237,174,47)" fg:x="101287" fg:w="204"/><text x="86.6200%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da462 (145 samples, 0.12%)</title><rect x="86.5440%" y="165" width="0.1236%" height="15" fill="rgb(206,201,31)" fg:x="101491" fg:w="145"/><text x="86.7940%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da477 (15 samples, 0.01%)</title><rect x="86.6745%" y="165" width="0.0128%" height="15" fill="rgb(231,57,52)" fg:x="101644" fg:w="15"/><text x="86.9245%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da47e (148 samples, 0.13%)</title><rect x="86.6872%" y="165" width="0.1262%" height="15" fill="rgb(248,177,22)" fg:x="101659" fg:w="148"/><text x="86.9372%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da482 (45 samples, 0.04%)</title><rect x="86.8134%" y="165" width="0.0384%" height="15" fill="rgb(215,211,37)" fg:x="101807" fg:w="45"/><text x="87.0634%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da484 (54 samples, 0.05%)</title><rect x="86.8518%" y="165" width="0.0460%" height="15" fill="rgb(241,128,51)" fg:x="101852" fg:w="54"/><text x="87.1018%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da488 (98 samples, 0.08%)</title><rect x="86.8979%" y="165" width="0.0836%" height="15" fill="rgb(227,165,31)" fg:x="101906" fg:w="98"/><text x="87.1479%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da48b (16 samples, 0.01%)</title><rect x="86.9814%" y="165" width="0.0136%" height="15" fill="rgb(228,167,24)" fg:x="102004" fg:w="16"/><text x="87.2314%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da496 (17 samples, 0.01%)</title><rect x="87.0019%" y="165" width="0.0145%" height="15" fill="rgb(228,143,12)" fg:x="102028" fg:w="17"/><text x="87.2519%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da499 (132 samples, 0.11%)</title><rect x="87.0164%" y="165" width="0.1126%" height="15" fill="rgb(249,149,8)" fg:x="102045" fg:w="132"/><text x="87.2664%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4a3 (3,540 samples, 3.02%)</title><rect x="87.1435%" y="165" width="3.0186%" height="15" fill="rgb(243,35,44)" fg:x="102194" fg:w="3540"/><text x="87.3935%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4d3 (370 samples, 0.32%)</title><rect x="90.1621%" y="165" width="0.3155%" height="15" fill="rgb(246,89,9)" fg:x="105734" fg:w="370"/><text x="90.4121%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4f5 (281 samples, 0.24%)</title><rect x="90.4878%" y="165" width="0.2396%" height="15" fill="rgb(233,213,13)" fg:x="106116" fg:w="281"/><text x="90.7378%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4f7 (17 samples, 0.01%)</title><rect x="90.7275%" y="165" width="0.0145%" height="15" fill="rgb(233,141,41)" fg:x="106397" fg:w="17"/><text x="90.9775%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da52a (266 samples, 0.23%)</title><rect x="90.7590%" y="165" width="0.2268%" height="15" fill="rgb(239,167,4)" fg:x="106434" fg:w="266"/><text x="91.0090%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da54d (281 samples, 0.24%)</title><rect x="90.9961%" y="165" width="0.2396%" height="15" fill="rgb(209,217,16)" fg:x="106712" fg:w="281"/><text x="91.2461%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da554 (18 samples, 0.02%)</title><rect x="91.2357%" y="165" width="0.0153%" height="15" fill="rgb(219,88,35)" fg:x="106993" fg:w="18"/><text x="91.4857%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da578 (244 samples, 0.21%)</title><rect x="91.2604%" y="165" width="0.2081%" height="15" fill="rgb(220,193,23)" fg:x="107022" fg:w="244"/><text x="91.5104%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da59a (98 samples, 0.08%)</title><rect x="91.4753%" y="165" width="0.0836%" height="15" fill="rgb(230,90,52)" fg:x="107274" fg:w="98"/><text x="91.7253%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5ad (1,968 samples, 1.68%)</title><rect x="91.5614%" y="165" width="1.6782%" height="15" fill="rgb(252,106,19)" fg:x="107375" fg:w="1968"/><text x="91.8114%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5bb (37 samples, 0.03%)</title><rect x="93.2439%" y="165" width="0.0316%" height="15" fill="rgb(206,74,20)" fg:x="109348" fg:w="37"/><text x="93.4939%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5c0 (443 samples, 0.38%)</title><rect x="93.2780%" y="165" width="0.3778%" height="15" fill="rgb(230,138,44)" fg:x="109388" fg:w="443"/><text x="93.5280%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5c2 (21 samples, 0.02%)</title><rect x="93.6557%" y="165" width="0.0179%" height="15" fill="rgb(235,182,43)" fg:x="109831" fg:w="21"/><text x="93.9057%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5ca (51 samples, 0.04%)</title><rect x="93.6736%" y="165" width="0.0435%" height="15" fill="rgb(242,16,51)" fg:x="109852" fg:w="51"/><text x="93.9236%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5d1 (28 samples, 0.02%)</title><rect x="93.7171%" y="165" width="0.0239%" height="15" fill="rgb(248,9,4)" fg:x="109903" fg:w="28"/><text x="93.9671%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5d4 (16 samples, 0.01%)</title><rect x="93.7410%" y="165" width="0.0136%" height="15" fill="rgb(210,31,22)" fg:x="109931" fg:w="16"/><text x="93.9910%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5db (27 samples, 0.02%)</title><rect x="93.7563%" y="165" width="0.0230%" height="15" fill="rgb(239,54,39)" fg:x="109949" fg:w="27"/><text x="94.0063%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5dd (53 samples, 0.05%)</title><rect x="93.7794%" y="165" width="0.0452%" height="15" fill="rgb(230,99,41)" fg:x="109976" fg:w="53"/><text x="94.0294%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5e3 (2,770 samples, 2.36%)</title><rect x="93.8246%" y="165" width="2.3621%" height="15" fill="rgb(253,106,12)" fg:x="110029" fg:w="2770"/><text x="94.0746%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5ec (158 samples, 0.13%)</title><rect x="96.1866%" y="165" width="0.1347%" height="15" fill="rgb(213,46,41)" fg:x="112799" fg:w="158"/><text x="96.4366%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da61a (288 samples, 0.25%)</title><rect x="96.3213%" y="165" width="0.2456%" height="15" fill="rgb(215,133,35)" fg:x="112957" fg:w="288"/><text x="96.5713%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da662 (12 samples, 0.01%)</title><rect x="96.5669%" y="165" width="0.0102%" height="15" fill="rgb(213,28,5)" fg:x="113245" fg:w="12"/><text x="96.8169%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da66d (113 samples, 0.10%)</title><rect x="96.5857%" y="165" width="0.0964%" height="15" fill="rgb(215,77,49)" fg:x="113267" fg:w="113"/><text x="96.8357%" y="175.50"></text></g><g><title>interpack`interpack::huffman_decode::Extractor::access (110,932 samples, 94.59%)</title><rect x="2.1958%" y="181" width="94.5946%" height="15" fill="rgb(248,100,22)" fg:x="2575" fg:w="110932"/><text x="2.4458%" y="191.50">interpack`interpack::huffman_decode::Extractor::access</text></g><g><title>libsystem_malloc.dylib`0x7ff8154da66f (127 samples, 0.11%)</title><rect x="96.6820%" y="165" width="0.1083%" height="15" fill="rgb(208,67,9)" fg:x="113380" fg:w="127"/><text x="96.9320%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (14 samples, 0.01%)</title><rect x="96.7929%" y="181" width="0.0119%" height="15" fill="rgb(219,133,21)" fg:x="113510" fg:w="14"/><text x="97.0429%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b988d (232 samples, 0.20%)</title><rect x="96.8048%" y="181" width="0.1978%" height="15" fill="rgb(246,46,29)" fg:x="113524" fg:w="232"/><text x="97.0548%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da300 (85 samples, 0.07%)</title><rect x="97.0027%" y="181" width="0.0725%" height="15" fill="rgb(246,185,52)" fg:x="113756" fg:w="85"/><text x="97.2527%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da301 (23 samples, 0.02%)</title><rect x="97.0752%" y="181" width="0.0196%" height="15" fill="rgb(252,136,11)" fg:x="113841" fg:w="23"/><text x="97.3252%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da671 (182 samples, 0.16%)</title><rect x="97.1024%" y="181" width="0.1552%" height="15" fill="rgb(219,138,53)" fg:x="113873" fg:w="182"/><text x="97.3524%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40e0 (190 samples, 0.16%)</title><rect x="97.2602%" y="181" width="0.1620%" height="15" fill="rgb(211,51,23)" fg:x="114058" fg:w="190"/><text x="97.5102%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40e5 (92 samples, 0.08%)</title><rect x="97.4222%" y="181" width="0.0785%" height="15" fill="rgb(247,221,28)" fg:x="114248" fg:w="92"/><text x="97.6722%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40ef (461 samples, 0.39%)</title><rect x="97.5049%" y="181" width="0.3931%" height="15" fill="rgb(251,222,45)" fg:x="114345" fg:w="461"/><text x="97.7549%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40f1 (98 samples, 0.08%)</title><rect x="97.8980%" y="181" width="0.0836%" height="15" fill="rgb(217,162,53)" fg:x="114806" fg:w="98"/><text x="98.1480%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40fb (255 samples, 0.22%)</title><rect x="97.9910%" y="181" width="0.2174%" height="15" fill="rgb(229,93,14)" fg:x="114915" fg:w="255"/><text x="98.2410%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4102 (14 samples, 0.01%)</title><rect x="98.2084%" y="181" width="0.0119%" height="15" fill="rgb(209,67,49)" fg:x="115170" fg:w="14"/><text x="98.4584%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4105 (418 samples, 0.36%)</title><rect x="98.2204%" y="181" width="0.3564%" height="15" fill="rgb(213,87,29)" fg:x="115184" fg:w="418"/><text x="98.4704%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4109 (1,169 samples, 1.00%)</title><rect x="98.5768%" y="181" width="0.9968%" height="15" fill="rgb(205,151,52)" fg:x="115602" fg:w="1169"/><text x="98.8268%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e410b (252 samples, 0.21%)</title><rect x="99.5736%" y="181" width="0.2149%" height="15" fill="rgb(253,215,39)" fg:x="116771" fg:w="252"/><text x="99.8236%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4122 (43 samples, 0.04%)</title><rect x="99.7979%" y="181" width="0.0367%" height="15" fill="rgb(221,220,41)" fg:x="117034" fg:w="43"/><text x="100.0479%" y="191.50"></text></g><g><title>interpack`main (117,270 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9991%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="117270"/><text x="0.2500%" y="271.50">interpack`main</text></g><g><title>interpack`std::rt::lang_start_internal (117,270 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9991%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="117270"/><text x="0.2500%" y="255.50">interpack`std::rt::lang_start_internal</text></g><g><title>interpack`std::rt::lang_start::_{{closure}} (117,270 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9991%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="117270"/><text x="0.2500%" y="239.50">interpack`std::rt::lang_start::_{{closure}}</text></g><g><title>interpack`std::sys_common::backtrace::__rust_begin_short_backtrace (117,270 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9991%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="117270"/><text x="0.2500%" y="223.50">interpack`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>interpack`interpack::main (117,270 samples, 100.00%)</title><rect x="0.0000%" y="197" width="99.9991%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="117270"/><text x="0.2500%" y="207.50">interpack`interpack::main</text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4127 (193 samples, 0.16%)</title><rect x="99.8346%" y="181" width="0.1646%" height="15" fill="rgb(248,225,23)" fg:x="117077" fg:w="193"/><text x="100.0846%" y="191.50"></text></g><g><title>all (117,271 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="117271"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld`start (117,271 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="117271"/><text x="0.2500%" y="287.50">dyld`start</text></g></svg></svg>