<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="527226"><g><title>interpack`&lt;memmap2::os::MmapInner as core::ops::drop::Drop&gt;::drop (382 samples, 0.07%)</title><rect x="22.2984%" y="165" width="0.0725%" height="15" fill="rgb(227,0,7)" fg:x="117563" fg:w="382"/><text x="22.5484%" y="175.50"></text></g><g><title>interpack`__rdl_dealloc (128 samples, 0.02%)</title><rect x="22.3762%" y="165" width="0.0243%" height="15" fill="rgb(217,0,24)" fg:x="117973" fg:w="128"/><text x="22.6262%" y="175.50"></text></g><g><title>interpack`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (1,205 samples, 0.23%)</title><rect x="23.9438%" y="149" width="0.2286%" height="15" fill="rgb(221,193,54)" fg:x="126238" fg:w="1205"/><text x="24.1938%" y="159.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (239 samples, 0.05%)</title><rect x="26.5996%" y="133" width="0.0453%" height="15" fill="rgb(248,212,6)" fg:x="140240" fg:w="239"/><text x="26.8496%" y="143.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral (1,291 samples, 0.24%)</title><rect x="26.6449%" y="133" width="0.2449%" height="15" fill="rgb(208,68,35)" fg:x="140479" fg:w="1291"/><text x="26.8949%" y="143.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (736 samples, 0.14%)</title><rect x="28.2884%" y="117" width="0.1396%" height="15" fill="rgb(232,128,0)" fg:x="149144" fg:w="736"/><text x="28.5384%" y="127.50"></text></g><g><title>interpack`__rdl_alloc (117 samples, 0.02%)</title><rect x="29.6960%" y="85" width="0.0222%" height="15" fill="rgb(207,160,47)" fg:x="156565" fg:w="117"/><text x="29.9460%" y="95.50"></text></g><g><title>interpack`__rust_alloc (867 samples, 0.16%)</title><rect x="29.7182%" y="85" width="0.1644%" height="15" fill="rgb(228,23,34)" fg:x="156682" fg:w="867"/><text x="29.9682%" y="95.50"></text></g><g><title>interpack`alloc::raw_vec::finish_grow (29,668 samples, 5.63%)</title><rect x="29.8826%" y="85" width="5.6272%" height="15" fill="rgb(218,30,26)" fg:x="157549" fg:w="29668"/><text x="30.1326%" y="95.50">interpa..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28,597 samples, 5.42%)</title><rect x="30.0858%" y="69" width="5.4240%" height="15" fill="rgb(220,122,19)" fg:x="158620" fg:w="28597"/><text x="30.3358%" y="79.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6,936 samples, 1.32%)</title><rect x="35.5098%" y="85" width="1.3156%" height="15" fill="rgb(250,228,42)" fg:x="187217" fg:w="6936"/><text x="35.7598%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (591 samples, 0.11%)</title><rect x="36.8254%" y="85" width="0.1121%" height="15" fill="rgb(240,193,28)" fg:x="194153" fg:w="591"/><text x="37.0754%" y="95.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (41,994 samples, 7.97%)</title><rect x="29.0650%" y="101" width="7.9651%" height="15" fill="rgb(216,20,37)" fg:x="153238" fg:w="41994"/><text x="29.3150%" y="111.50">interpack`a..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (488 samples, 0.09%)</title><rect x="36.9375%" y="85" width="0.0926%" height="15" fill="rgb(206,188,39)" fg:x="194744" fg:w="488"/><text x="37.1875%" y="95.50"></text></g><g><title>interpack`alloc::raw_vec::finish_grow (476 samples, 0.09%)</title><rect x="37.0300%" y="101" width="0.0903%" height="15" fill="rgb(217,207,13)" fg:x="195232" fg:w="476"/><text x="37.2800%" y="111.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (46,927 samples, 8.90%)</title><rect x="28.4280%" y="117" width="8.9007%" height="15" fill="rgb(231,73,38)" fg:x="149880" fg:w="46927"/><text x="28.6780%" y="127.50">interpack`&lt;al..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,099 samples, 0.21%)</title><rect x="37.1203%" y="101" width="0.2084%" height="15" fill="rgb(225,20,46)" fg:x="195708" fg:w="1099"/><text x="37.3703%" y="111.50"></text></g><g><title>interpack`DYLD-STUB$$memcpy (454 samples, 0.09%)</title><rect x="37.3288%" y="117" width="0.0861%" height="15" fill="rgb(210,31,41)" fg:x="196807" fg:w="454"/><text x="37.5788%" y="127.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (668 samples, 0.13%)</title><rect x="37.4149%" y="117" width="0.1267%" height="15" fill="rgb(221,200,47)" fg:x="197261" fg:w="668"/><text x="37.6649%" y="127.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral (9,727 samples, 1.84%)</title><rect x="37.5416%" y="117" width="1.8449%" height="15" fill="rgb(226,26,5)" fg:x="197929" fg:w="9727"/><text x="37.7916%" y="127.50">i..</text></g><g><title>interpack`core::fmt::Formatter::pad_integral::write_prefix (1,146 samples, 0.22%)</title><rect x="39.3865%" y="117" width="0.2174%" height="15" fill="rgb(249,33,26)" fg:x="207656" fg:w="1146"/><text x="39.6365%" y="127.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (842 samples, 0.16%)</title><rect x="39.6046%" y="85" width="0.1597%" height="15" fill="rgb(235,183,28)" fg:x="208806" fg:w="842"/><text x="39.8546%" y="95.50"></text></g><g><title>interpack`__rdl_alloc (304 samples, 0.06%)</title><rect x="40.6734%" y="53" width="0.0577%" height="15" fill="rgb(221,5,38)" fg:x="214441" fg:w="304"/><text x="40.9234%" y="63.50"></text></g><g><title>interpack`__rust_alloc (903 samples, 0.17%)</title><rect x="40.7311%" y="53" width="0.1713%" height="15" fill="rgb(247,18,42)" fg:x="214745" fg:w="903"/><text x="40.9811%" y="63.50"></text></g><g><title>interpack`alloc::raw_vec::finish_grow (35,947 samples, 6.82%)</title><rect x="40.9024%" y="53" width="6.8181%" height="15" fill="rgb(241,131,45)" fg:x="215648" fg:w="35947"/><text x="41.1524%" y="63.50">interpack..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (34,820 samples, 6.60%)</title><rect x="41.1161%" y="37" width="6.6044%" height="15" fill="rgb(249,31,29)" fg:x="216775" fg:w="34820"/><text x="41.3661%" y="47.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8,059 samples, 1.53%)</title><rect x="47.7205%" y="53" width="1.5286%" height="15" fill="rgb(225,111,53)" fg:x="251595" fg:w="8059"/><text x="47.9705%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc (806 samples, 0.15%)</title><rect x="49.2491%" y="53" width="0.1529%" height="15" fill="rgb(238,160,17)" fg:x="259654" fg:w="806"/><text x="49.4991%" y="63.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (49,124 samples, 9.32%)</title><rect x="40.1663%" y="69" width="9.3174%" height="15" fill="rgb(214,148,48)" fg:x="211767" fg:w="49124"/><text x="40.4163%" y="79.50">interpack`all..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (431 samples, 0.08%)</title><rect x="49.4020%" y="53" width="0.0817%" height="15" fill="rgb(232,36,49)" fg:x="260460" fg:w="431"/><text x="49.6520%" y="63.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (52,634 samples, 9.98%)</title><rect x="39.6039%" y="101" width="9.9832%" height="15" fill="rgb(209,103,24)" fg:x="208802" fg:w="52634"/><text x="39.8539%" y="111.50">interpack`&lt;all..</text></g><g><title>interpack`alloc::string::String::push (51,788 samples, 9.82%)</title><rect x="39.7644%" y="85" width="9.8227%" height="15" fill="rgb(229,88,8)" fg:x="209648" fg:w="51788"/><text x="40.0144%" y="95.50">interpack`allo..</text></g><g><title>interpack`alloc::raw_vec::finish_grow (545 samples, 0.10%)</title><rect x="49.4837%" y="69" width="0.1034%" height="15" fill="rgb(213,181,19)" fg:x="260891" fg:w="545"/><text x="49.7337%" y="79.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,875 samples, 0.55%)</title><rect x="49.5871%" y="101" width="0.5453%" height="15" fill="rgb(254,191,54)" fg:x="261436" fg:w="2875"/><text x="49.8371%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,164 samples, 0.22%)</title><rect x="49.9116%" y="85" width="0.2208%" height="15" fill="rgb(241,83,37)" fg:x="263147" fg:w="1164"/><text x="50.1616%" y="95.50"></text></g><g><title>interpack`DYLD-STUB$$memcpy (556 samples, 0.11%)</title><rect x="50.1324%" y="101" width="0.1055%" height="15" fill="rgb(233,36,39)" fg:x="264311" fg:w="556"/><text x="50.3824%" y="111.50"></text></g><g><title>interpack`alloc::string::String::push (962 samples, 0.18%)</title><rect x="50.2378%" y="101" width="0.1825%" height="15" fill="rgb(226,3,54)" fg:x="264867" fg:w="962"/><text x="50.4878%" y="111.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral::write_prefix (3,284 samples, 0.62%)</title><rect x="50.4203%" y="101" width="0.6229%" height="15" fill="rgb(245,192,40)" fg:x="265829" fg:w="3284"/><text x="50.6703%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (57 samples, 0.01%)</title><rect x="51.0432%" y="101" width="0.0108%" height="15" fill="rgb(238,167,29)" fg:x="269113" fg:w="57"/><text x="51.2932%" y="111.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral (60,677 samples, 11.51%)</title><rect x="39.6039%" y="117" width="11.5087%" height="15" fill="rgb(232,182,51)" fg:x="208802" fg:w="60677"/><text x="39.8539%" y="127.50">interpack`core::f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (309 samples, 0.06%)</title><rect x="51.0540%" y="101" width="0.0586%" height="15" fill="rgb(231,60,39)" fg:x="269170" fg:w="309"/><text x="51.3040%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (82 samples, 0.02%)</title><rect x="51.1126%" y="117" width="0.0156%" height="15" fill="rgb(208,69,12)" fg:x="269479" fg:w="82"/><text x="51.3626%" y="127.50"></text></g><g><title>interpack`alloc::fmt::format::format_inner (151,670 samples, 28.77%)</title><rect x="22.4005%" y="165" width="28.7675%" height="15" fill="rgb(235,93,37)" fg:x="118101" fg:w="151670"/><text x="22.6505%" y="175.50">interpack`alloc::fmt::format::format_inner</text></g><g><title>interpack`core::fmt::write (142,328 samples, 27.00%)</title><rect x="24.1724%" y="149" width="26.9956%" height="15" fill="rgb(213,116,39)" fg:x="127443" fg:w="142328"/><text x="24.4224%" y="159.50">interpack`core::fmt::write</text></g><g><title>interpack`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (128,001 samples, 24.28%)</title><rect x="26.8898%" y="133" width="24.2782%" height="15" fill="rgb(222,207,29)" fg:x="141770" fg:w="128001"/><text x="27.1398%" y="143.50">interpack`core::fmt::num::_&lt;impl core::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (210 samples, 0.04%)</title><rect x="51.1282%" y="117" width="0.0398%" height="15" fill="rgb(206,96,30)" fg:x="269561" fg:w="210"/><text x="51.3782%" y="127.50"></text></g><g><title>interpack`core::fmt::write (1,274 samples, 0.24%)</title><rect x="51.1680%" y="165" width="0.2416%" height="15" fill="rgb(218,138,4)" fg:x="269771" fg:w="1274"/><text x="51.4180%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (76,451 samples, 14.50%)</title><rect x="51.5269%" y="149" width="14.5006%" height="15" fill="rgb(250,191,14)" fg:x="271663" fg:w="76451"/><text x="51.7769%" y="159.50">libsystem_kernel.dylib..</text></g><g><title>interpack`memmap2::os::MmapInner::map (78,161 samples, 14.82%)</title><rect x="51.4096%" y="165" width="14.8250%" height="15" fill="rgb(239,60,40)" fg:x="271045" fg:w="78161"/><text x="51.6596%" y="175.50">interpack`memmap2::os::..</text></g><g><title>libsystem_kernel.dylib`mmap (1,092 samples, 0.21%)</title><rect x="66.0275%" y="149" width="0.2071%" height="15" fill="rgb(206,27,48)" fg:x="348114" fg:w="1092"/><text x="66.2775%" y="159.50"></text></g><g><title>interpack`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::remaining (66 samples, 0.01%)</title><rect x="66.2439%" y="149" width="0.0125%" height="15" fill="rgb(225,35,8)" fg:x="349255" fg:w="66"/><text x="66.4939%" y="159.50"></text></g><g><title>interpack`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3,415 samples, 0.65%)</title><rect x="66.2564%" y="149" width="0.6477%" height="15" fill="rgb(250,213,24)" fg:x="349321" fg:w="3415"/><text x="66.5064%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (3,407 samples, 0.65%)</title><rect x="66.2579%" y="133" width="0.6462%" height="15" fill="rgb(247,123,22)" fg:x="349329" fg:w="3407"/><text x="66.5079%" y="143.50"></text></g><g><title>interpack`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (3,524 samples, 0.67%)</title><rect x="66.2365%" y="165" width="0.6684%" height="15" fill="rgb(231,138,38)" fg:x="349216" fg:w="3524"/><text x="66.4865%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mmap (385 samples, 0.07%)</title><rect x="66.9049%" y="165" width="0.0730%" height="15" fill="rgb(231,145,46)" fg:x="352740" fg:w="385"/><text x="67.1549%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`munmap (99 samples, 0.02%)</title><rect x="66.9779%" y="165" width="0.0188%" height="15" fill="rgb(251,118,11)" fg:x="353125" fg:w="99"/><text x="67.2279%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (50,464 samples, 9.57%)</title><rect x="66.9967%" y="165" width="9.5716%" height="15" fill="rgb(217,147,25)" fg:x="353224" fg:w="50464"/><text x="67.2467%" y="175.50">libsystem_mall..</text></g><g><title>interpack`&lt;interpack::huffman_encode::Writer as interpack::util::memory_map::LineByLine&gt;::line_by_line (403,693 samples, 76.57%)</title><rect x="0.0000%" y="181" width="76.5693%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="403693"/><text x="0.2500%" y="191.50">interpack`&lt;interpack::huffman_encode::Writer as interpack::util::memory_map::LineByLine&gt;::line_by_line</text></g><g><title>interpack`&lt;memmap2::os::MmapInner as core::ops::drop::Drop&gt;::drop (200 samples, 0.04%)</title><rect x="76.5693%" y="181" width="0.0379%" height="15" fill="rgb(209,12,38)" fg:x="403693" fg:w="200"/><text x="76.8193%" y="191.50"></text></g><g><title>interpack`DYLD-STUB$$free (362 samples, 0.07%)</title><rect x="76.6072%" y="181" width="0.0687%" height="15" fill="rgb(227,1,9)" fg:x="403893" fg:w="362"/><text x="76.8572%" y="191.50"></text></g><g><title>interpack`__rdl_dealloc (3,064 samples, 0.58%)</title><rect x="76.6779%" y="181" width="0.5812%" height="15" fill="rgb(248,47,43)" fg:x="404266" fg:w="3064"/><text x="76.9279%" y="191.50"></text></g><g><title>interpack`__rust_dealloc (998 samples, 0.19%)</title><rect x="77.2591%" y="181" width="0.1893%" height="15" fill="rgb(221,10,30)" fg:x="407330" fg:w="998"/><text x="77.5091%" y="191.50"></text></g><g><title>interpack`alloc::fmt::format::format_inner (1,584 samples, 0.30%)</title><rect x="77.4484%" y="181" width="0.3004%" height="15" fill="rgb(210,229,1)" fg:x="408328" fg:w="1584"/><text x="77.6984%" y="191.50"></text></g><g><title>interpack`memmap2::os::MmapInner::map (156 samples, 0.03%)</title><rect x="77.7488%" y="181" width="0.0296%" height="15" fill="rgb(222,148,37)" fg:x="409912" fg:w="156"/><text x="77.9988%" y="191.50"></text></g><g><title>interpack`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (89 samples, 0.02%)</title><rect x="77.7784%" y="181" width="0.0169%" height="15" fill="rgb(234,67,33)" fg:x="410068" fg:w="89"/><text x="78.0284%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (109,220 samples, 20.72%)</title><rect x="77.7953%" y="181" width="20.7160%" height="15" fill="rgb(247,98,35)" fg:x="410157" fg:w="109220"/><text x="78.0453%" y="191.50">libsystem_kernel.dylib`__munmap</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (418 samples, 0.08%)</title><rect x="98.5198%" y="181" width="0.0793%" height="15" fill="rgb(247,138,52)" fg:x="519422" fg:w="418"/><text x="98.7698%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (6,921 samples, 1.31%)</title><rect x="98.5991%" y="181" width="1.3127%" height="15" fill="rgb(213,79,30)" fg:x="519840" fg:w="6921"/><text x="98.8491%" y="191.50"></text></g><g><title>dyld`start (527,225 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9998%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="527225"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>interpack`main (527,225 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9998%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="527225"/><text x="0.2500%" y="271.50">interpack`main</text></g><g><title>interpack`std::rt::lang_start_internal (527,225 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9998%" height="15" fill="rgb(216,154,8)" fg:x="0" fg:w="527225"/><text x="0.2500%" y="255.50">interpack`std::rt::lang_start_internal</text></g><g><title>interpack`std::rt::lang_start::_{{closure}} (527,225 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9998%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="527225"/><text x="0.2500%" y="239.50">interpack`std::rt::lang_start::_{{closure}}</text></g><g><title>interpack`std::sys_common::backtrace::__rust_begin_short_backtrace (527,225 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9998%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="527225"/><text x="0.2500%" y="223.50">interpack`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>interpack`interpack::main (527,225 samples, 100.00%)</title><rect x="0.0000%" y="197" width="99.9998%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="527225"/><text x="0.2500%" y="207.50">interpack`interpack::main</text></g><g><title>libsystem_malloc.dylib`nanov2_try_free_default (464 samples, 0.09%)</title><rect x="99.9118%" y="181" width="0.0880%" height="15" fill="rgb(233,84,52)" fg:x="526761" fg:w="464"/><text x="100.1618%" y="191.50"></text></g><g><title>all (527,226 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="527226"/><text x="0.2500%" y="303.50"></text></g></svg></svg>