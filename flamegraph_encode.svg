<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="480072"><g><title>interpack`&lt;memmap2::os::MmapInner as core::ops::drop::Drop&gt;::drop (313 samples, 0.07%)</title><rect x="17.4595%" y="165" width="0.0652%" height="15" fill="rgb(227,0,7)" fg:x="83818" fg:w="313"/><text x="17.7095%" y="175.50"></text></g><g><title>interpack`__rdl_dealloc (130 samples, 0.03%)</title><rect x="17.5286%" y="165" width="0.0271%" height="15" fill="rgb(217,0,24)" fg:x="84150" fg:w="130"/><text x="17.7786%" y="175.50"></text></g><g><title>interpack`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (1,632 samples, 0.34%)</title><rect x="19.4229%" y="149" width="0.3399%" height="15" fill="rgb(221,193,54)" fg:x="93244" fg:w="1632"/><text x="19.6729%" y="159.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (305 samples, 0.06%)</title><rect x="22.4985%" y="133" width="0.0635%" height="15" fill="rgb(248,212,6)" fg:x="108009" fg:w="305"/><text x="22.7485%" y="143.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral (1,524 samples, 0.32%)</title><rect x="22.5620%" y="133" width="0.3175%" height="15" fill="rgb(208,68,35)" fg:x="108314" fg:w="1524"/><text x="22.8120%" y="143.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (849 samples, 0.18%)</title><rect x="24.6861%" y="117" width="0.1768%" height="15" fill="rgb(232,128,0)" fg:x="118511" fg:w="849"/><text x="24.9361%" y="127.50"></text></g><g><title>interpack`__rdl_alloc (168 samples, 0.03%)</title><rect x="26.4485%" y="85" width="0.0350%" height="15" fill="rgb(207,160,47)" fg:x="126972" fg:w="168"/><text x="26.6985%" y="95.50"></text></g><g><title>interpack`__rust_alloc (738 samples, 0.15%)</title><rect x="26.4835%" y="85" width="0.1537%" height="15" fill="rgb(228,23,34)" fg:x="127140" fg:w="738"/><text x="26.7335%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e12 (106 samples, 0.02%)</title><rect x="26.8653%" y="69" width="0.0221%" height="15" fill="rgb(218,30,26)" fg:x="128973" fg:w="106"/><text x="27.1153%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e1b (186 samples, 0.04%)</title><rect x="26.9058%" y="69" width="0.0387%" height="15" fill="rgb(220,122,19)" fg:x="129167" fg:w="186"/><text x="27.1558%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e1f (150 samples, 0.03%)</title><rect x="26.9445%" y="69" width="0.0312%" height="15" fill="rgb(250,228,42)" fg:x="129353" fg:w="150"/><text x="27.1945%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e42 (190 samples, 0.04%)</title><rect x="26.9941%" y="69" width="0.0396%" height="15" fill="rgb(240,193,28)" fg:x="129591" fg:w="190"/><text x="27.2441%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e49 (100 samples, 0.02%)</title><rect x="27.0389%" y="69" width="0.0208%" height="15" fill="rgb(216,20,37)" fg:x="129806" fg:w="100"/><text x="27.2889%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e5d (1,178 samples, 0.25%)</title><rect x="27.0743%" y="69" width="0.2454%" height="15" fill="rgb(206,188,39)" fg:x="129976" fg:w="1178"/><text x="27.3243%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e63 (490 samples, 0.10%)</title><rect x="27.3197%" y="69" width="0.1021%" height="15" fill="rgb(217,207,13)" fg:x="131154" fg:w="490"/><text x="27.5697%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e67 (6,751 samples, 1.41%)</title><rect x="27.4217%" y="69" width="1.4062%" height="15" fill="rgb(231,73,38)" fg:x="131644" fg:w="6751"/><text x="27.6717%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e6b (1,071 samples, 0.22%)</title><rect x="28.8280%" y="69" width="0.2231%" height="15" fill="rgb(225,20,46)" fg:x="138395" fg:w="1071"/><text x="29.0780%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e79 (373 samples, 0.08%)</title><rect x="29.0602%" y="69" width="0.0777%" height="15" fill="rgb(210,31,41)" fg:x="139510" fg:w="373"/><text x="29.3102%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e84 (1,826 samples, 0.38%)</title><rect x="29.1444%" y="69" width="0.3804%" height="15" fill="rgb(221,200,47)" fg:x="139914" fg:w="1826"/><text x="29.3944%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e86 (158 samples, 0.03%)</title><rect x="29.5247%" y="69" width="0.0329%" height="15" fill="rgb(226,26,5)" fg:x="141740" fg:w="158"/><text x="29.7747%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e89 (420 samples, 0.09%)</title><rect x="29.5576%" y="69" width="0.0875%" height="15" fill="rgb(249,33,26)" fg:x="141898" fg:w="420"/><text x="29.8076%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e93 (375 samples, 0.08%)</title><rect x="29.6541%" y="69" width="0.0781%" height="15" fill="rgb(235,183,28)" fg:x="142361" fg:w="375"/><text x="29.9041%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e9a (1,449 samples, 0.30%)</title><rect x="29.7397%" y="69" width="0.3018%" height="15" fill="rgb(221,5,38)" fg:x="142772" fg:w="1449"/><text x="29.9897%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e9d (150 samples, 0.03%)</title><rect x="30.0415%" y="69" width="0.0312%" height="15" fill="rgb(247,18,42)" fg:x="144221" fg:w="150"/><text x="30.2915%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ebb (379 samples, 0.08%)</title><rect x="30.0730%" y="69" width="0.0789%" height="15" fill="rgb(241,131,45)" fg:x="144372" fg:w="379"/><text x="30.3230%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ebe (161 samples, 0.03%)</title><rect x="30.1519%" y="69" width="0.0335%" height="15" fill="rgb(249,31,29)" fg:x="144751" fg:w="161"/><text x="30.4019%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ec2 (280 samples, 0.06%)</title><rect x="30.1855%" y="69" width="0.0583%" height="15" fill="rgb(225,111,53)" fg:x="144912" fg:w="280"/><text x="30.4355%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ec5 (406 samples, 0.08%)</title><rect x="30.2438%" y="69" width="0.0846%" height="15" fill="rgb(238,160,17)" fg:x="145192" fg:w="406"/><text x="30.4938%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ed6 (55 samples, 0.01%)</title><rect x="30.3371%" y="69" width="0.0115%" height="15" fill="rgb(214,148,48)" fg:x="145640" fg:w="55"/><text x="30.5871%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ee9 (414 samples, 0.09%)</title><rect x="30.3519%" y="69" width="0.0862%" height="15" fill="rgb(232,36,49)" fg:x="145711" fg:w="414"/><text x="30.6019%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8efb (155 samples, 0.03%)</title><rect x="30.4465%" y="69" width="0.0323%" height="15" fill="rgb(209,103,24)" fg:x="146165" fg:w="155"/><text x="30.6965%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f02 (200 samples, 0.04%)</title><rect x="30.4823%" y="69" width="0.0417%" height="15" fill="rgb(229,88,8)" fg:x="146337" fg:w="200"/><text x="30.7323%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f09 (178 samples, 0.04%)</title><rect x="30.5240%" y="69" width="0.0371%" height="15" fill="rgb(213,181,19)" fg:x="146537" fg:w="178"/><text x="30.7740%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f0d (72 samples, 0.01%)</title><rect x="30.5610%" y="69" width="0.0150%" height="15" fill="rgb(254,191,54)" fg:x="146715" fg:w="72"/><text x="30.8110%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f16 (114 samples, 0.02%)</title><rect x="30.5833%" y="69" width="0.0237%" height="15" fill="rgb(241,83,37)" fg:x="146822" fg:w="114"/><text x="30.8333%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f1c (180 samples, 0.04%)</title><rect x="30.6071%" y="69" width="0.0375%" height="15" fill="rgb(233,36,39)" fg:x="146936" fg:w="180"/><text x="30.8571%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f1f (203 samples, 0.04%)</title><rect x="30.6446%" y="69" width="0.0423%" height="15" fill="rgb(226,3,54)" fg:x="147116" fg:w="203"/><text x="30.8946%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f33 (87 samples, 0.02%)</title><rect x="30.6931%" y="69" width="0.0181%" height="15" fill="rgb(245,192,40)" fg:x="147349" fg:w="87"/><text x="30.9431%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f39 (95 samples, 0.02%)</title><rect x="30.7112%" y="69" width="0.0198%" height="15" fill="rgb(238,167,29)" fg:x="147436" fg:w="95"/><text x="30.9612%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f40 (191 samples, 0.04%)</title><rect x="30.7310%" y="69" width="0.0398%" height="15" fill="rgb(232,182,51)" fg:x="147531" fg:w="191"/><text x="30.9810%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f43 (242 samples, 0.05%)</title><rect x="30.7708%" y="69" width="0.0504%" height="15" fill="rgb(231,60,39)" fg:x="147722" fg:w="242"/><text x="31.0208%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f49 (340 samples, 0.07%)</title><rect x="30.8212%" y="69" width="0.0708%" height="15" fill="rgb(208,69,12)" fg:x="147964" fg:w="340"/><text x="31.0712%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f4e (5,401 samples, 1.13%)</title><rect x="30.8920%" y="69" width="1.1250%" height="15" fill="rgb(235,93,37)" fg:x="148304" fg:w="5401"/><text x="31.1420%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f50 (1,054 samples, 0.22%)</title><rect x="32.0171%" y="69" width="0.2196%" height="15" fill="rgb(213,116,39)" fg:x="153705" fg:w="1054"/><text x="32.2671%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f59 (57 samples, 0.01%)</title><rect x="32.2468%" y="69" width="0.0119%" height="15" fill="rgb(222,207,29)" fg:x="154808" fg:w="57"/><text x="32.4968%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f62 (209 samples, 0.04%)</title><rect x="32.2679%" y="69" width="0.0435%" height="15" fill="rgb(206,96,30)" fg:x="154909" fg:w="209"/><text x="32.5179%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f65 (99 samples, 0.02%)</title><rect x="32.3114%" y="69" width="0.0206%" height="15" fill="rgb(218,138,4)" fg:x="155118" fg:w="99"/><text x="32.5614%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f68 (98 samples, 0.02%)</title><rect x="32.3320%" y="69" width="0.0204%" height="15" fill="rgb(250,191,14)" fg:x="155217" fg:w="98"/><text x="32.5820%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f72 (559 samples, 0.12%)</title><rect x="32.3529%" y="69" width="0.1164%" height="15" fill="rgb(239,60,40)" fg:x="155317" fg:w="559"/><text x="32.6029%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f81 (89 samples, 0.02%)</title><rect x="32.4710%" y="69" width="0.0185%" height="15" fill="rgb(206,27,48)" fg:x="155884" fg:w="89"/><text x="32.7210%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f84 (112 samples, 0.02%)</title><rect x="32.4895%" y="69" width="0.0233%" height="15" fill="rgb(225,35,8)" fg:x="155973" fg:w="112"/><text x="32.7395%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f8a (102 samples, 0.02%)</title><rect x="32.5128%" y="69" width="0.0212%" height="15" fill="rgb(250,213,24)" fg:x="156085" fg:w="102"/><text x="32.7628%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f8f (1,820 samples, 0.38%)</title><rect x="32.5341%" y="69" width="0.3791%" height="15" fill="rgb(247,123,22)" fg:x="156187" fg:w="1820"/><text x="32.7841%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8fcf (49 samples, 0.01%)</title><rect x="32.9132%" y="69" width="0.0102%" height="15" fill="rgb(231,138,38)" fg:x="158007" fg:w="49"/><text x="33.1632%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8fe9 (341 samples, 0.07%)</title><rect x="32.9244%" y="69" width="0.0710%" height="15" fill="rgb(231,145,46)" fg:x="158061" fg:w="341"/><text x="33.1744%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b902e (147 samples, 0.03%)</title><rect x="33.0050%" y="69" width="0.0306%" height="15" fill="rgb(251,118,11)" fg:x="158448" fg:w="147"/><text x="33.2550%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b903e (331 samples, 0.07%)</title><rect x="33.0367%" y="69" width="0.0689%" height="15" fill="rgb(217,147,25)" fg:x="158600" fg:w="331"/><text x="33.2867%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b9040 (136 samples, 0.03%)</title><rect x="33.1057%" y="69" width="0.0283%" height="15" fill="rgb(247,81,37)" fg:x="158931" fg:w="136"/><text x="33.3557%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b905f (61 samples, 0.01%)</title><rect x="33.1357%" y="69" width="0.0127%" height="15" fill="rgb(209,12,38)" fg:x="159075" fg:w="61"/><text x="33.3857%" y="79.50"></text></g><g><title>interpack`alloc::raw_vec::finish_grow (31,601 samples, 6.58%)</title><rect x="26.6373%" y="85" width="6.5826%" height="15" fill="rgb(227,1,9)" fg:x="127878" fg:w="31601"/><text x="26.8873%" y="95.50">interpack..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154b9067 (343 samples, 0.07%)</title><rect x="33.1484%" y="69" width="0.0714%" height="15" fill="rgb(248,47,43)" fg:x="159136" fg:w="343"/><text x="33.3984%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dd0 (669 samples, 0.14%)</title><rect x="33.2198%" y="85" width="0.1394%" height="15" fill="rgb(221,10,30)" fg:x="159479" fg:w="669"/><text x="33.4698%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dd3 (126 samples, 0.03%)</title><rect x="33.3592%" y="85" width="0.0262%" height="15" fill="rgb(210,229,1)" fg:x="160148" fg:w="126"/><text x="33.6092%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dda (204 samples, 0.04%)</title><rect x="33.3854%" y="85" width="0.0425%" height="15" fill="rgb(222,148,37)" fg:x="160274" fg:w="204"/><text x="33.6354%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e0e (182 samples, 0.04%)</title><rect x="33.4350%" y="85" width="0.0379%" height="15" fill="rgb(234,67,33)" fg:x="160512" fg:w="182"/><text x="33.6850%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b903f (148 samples, 0.03%)</title><rect x="33.4783%" y="85" width="0.0308%" height="15" fill="rgb(247,98,35)" fg:x="160720" fg:w="148"/><text x="33.7283%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3647 (131 samples, 0.03%)</title><rect x="33.5091%" y="85" width="0.0273%" height="15" fill="rgb(247,138,52)" fg:x="160868" fg:w="131"/><text x="33.7591%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e364e (83 samples, 0.02%)</title><rect x="33.5364%" y="85" width="0.0173%" height="15" fill="rgb(213,79,30)" fg:x="160999" fg:w="83"/><text x="33.7864%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3650 (58 samples, 0.01%)</title><rect x="33.5537%" y="85" width="0.0121%" height="15" fill="rgb(246,177,23)" fg:x="161082" fg:w="58"/><text x="33.8037%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3658 (419 samples, 0.09%)</title><rect x="33.5658%" y="85" width="0.0873%" height="15" fill="rgb(230,62,27)" fg:x="161140" fg:w="419"/><text x="33.8158%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e365a (86 samples, 0.02%)</title><rect x="33.6531%" y="85" width="0.0179%" height="15" fill="rgb(216,154,8)" fg:x="161559" fg:w="86"/><text x="33.9031%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3661 (131 samples, 0.03%)</title><rect x="33.6710%" y="85" width="0.0273%" height="15" fill="rgb(244,35,45)" fg:x="161645" fg:w="131"/><text x="33.9210%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3664 (688 samples, 0.14%)</title><rect x="33.6983%" y="85" width="0.1433%" height="15" fill="rgb(251,115,12)" fg:x="161776" fg:w="688"/><text x="33.9483%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e366b (86 samples, 0.02%)</title><rect x="33.8416%" y="85" width="0.0179%" height="15" fill="rgb(240,54,50)" fg:x="162464" fg:w="86"/><text x="34.0916%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3675 (387 samples, 0.08%)</title><rect x="33.8622%" y="85" width="0.0806%" height="15" fill="rgb(233,84,52)" fg:x="162563" fg:w="387"/><text x="34.1122%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e367b (1,796 samples, 0.37%)</title><rect x="33.9514%" y="85" width="0.3741%" height="15" fill="rgb(207,117,47)" fg:x="162991" fg:w="1796"/><text x="34.2014%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e367d (596 samples, 0.12%)</title><rect x="34.3255%" y="85" width="0.1241%" height="15" fill="rgb(249,43,39)" fg:x="164787" fg:w="596"/><text x="34.5755%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3691 (253 samples, 0.05%)</title><rect x="34.4677%" y="85" width="0.0527%" height="15" fill="rgb(209,38,44)" fg:x="165470" fg:w="253"/><text x="34.7177%" y="95.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (42,799 samples, 8.92%)</title><rect x="25.6199%" y="101" width="8.9151%" height="15" fill="rgb(236,212,23)" fg:x="122994" fg:w="42799"/><text x="25.8699%" y="111.50">interpack`all..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3696 (70 samples, 0.01%)</title><rect x="34.5204%" y="85" width="0.0146%" height="15" fill="rgb(242,79,21)" fg:x="165723" fg:w="70"/><text x="34.7704%" y="95.50"></text></g><g><title>interpack`alloc::raw_vec::finish_grow (481 samples, 0.10%)</title><rect x="34.5350%" y="101" width="0.1002%" height="15" fill="rgb(211,96,35)" fg:x="165793" fg:w="481"/><text x="34.7850%" y="111.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (48,192 samples, 10.04%)</title><rect x="24.8629%" y="117" width="10.0385%" height="15" fill="rgb(253,215,40)" fg:x="119360" fg:w="48192"/><text x="25.1129%" y="127.50">interpack`&lt;allo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,278 samples, 0.27%)</title><rect x="34.6352%" y="101" width="0.2662%" height="15" fill="rgb(211,81,21)" fg:x="166274" fg:w="1278"/><text x="34.8852%" y="111.50"></text></g><g><title>interpack`DYLD-STUB$$memcpy (543 samples, 0.11%)</title><rect x="34.9014%" y="117" width="0.1131%" height="15" fill="rgb(208,190,38)" fg:x="167552" fg:w="543"/><text x="35.1514%" y="127.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (949 samples, 0.20%)</title><rect x="35.0145%" y="117" width="0.1977%" height="15" fill="rgb(235,213,38)" fg:x="168095" fg:w="949"/><text x="35.2645%" y="127.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral (10,551 samples, 2.20%)</title><rect x="35.2122%" y="117" width="2.1978%" height="15" fill="rgb(237,122,38)" fg:x="169044" fg:w="10551"/><text x="35.4622%" y="127.50">i..</text></g><g><title>interpack`core::fmt::Formatter::pad_integral::write_prefix (1,180 samples, 0.25%)</title><rect x="37.4100%" y="117" width="0.2458%" height="15" fill="rgb(244,218,35)" fg:x="179595" fg:w="1180"/><text x="37.6600%" y="127.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (561 samples, 0.12%)</title><rect x="37.6569%" y="85" width="0.1169%" height="15" fill="rgb(240,68,47)" fg:x="180780" fg:w="561"/><text x="37.9069%" y="95.50"></text></g><g><title>interpack`__rdl_alloc (330 samples, 0.07%)</title><rect x="38.8615%" y="53" width="0.0687%" height="15" fill="rgb(210,16,53)" fg:x="186563" fg:w="330"/><text x="39.1115%" y="63.50"></text></g><g><title>interpack`__rust_alloc (918 samples, 0.19%)</title><rect x="38.9302%" y="53" width="0.1912%" height="15" fill="rgb(235,124,12)" fg:x="186893" fg:w="918"/><text x="39.1802%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e12 (230 samples, 0.05%)</title><rect x="39.4043%" y="37" width="0.0479%" height="15" fill="rgb(224,169,11)" fg:x="189169" fg:w="230"/><text x="39.6543%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e18 (134 samples, 0.03%)</title><rect x="39.4572%" y="37" width="0.0279%" height="15" fill="rgb(250,166,2)" fg:x="189423" fg:w="134"/><text x="39.7072%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e1a (53 samples, 0.01%)</title><rect x="39.4851%" y="37" width="0.0110%" height="15" fill="rgb(242,216,29)" fg:x="189557" fg:w="53"/><text x="39.7351%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e1b (76 samples, 0.02%)</title><rect x="39.4962%" y="37" width="0.0158%" height="15" fill="rgb(230,116,27)" fg:x="189610" fg:w="76"/><text x="39.7462%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e1f (278 samples, 0.06%)</title><rect x="39.5120%" y="37" width="0.0579%" height="15" fill="rgb(228,99,48)" fg:x="189686" fg:w="278"/><text x="39.7620%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e31 (154 samples, 0.03%)</title><rect x="39.5759%" y="37" width="0.0321%" height="15" fill="rgb(253,11,6)" fg:x="189993" fg:w="154"/><text x="39.8259%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e35 (51 samples, 0.01%)</title><rect x="39.6080%" y="37" width="0.0106%" height="15" fill="rgb(247,143,39)" fg:x="190147" fg:w="51"/><text x="39.8580%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e42 (90 samples, 0.02%)</title><rect x="39.6186%" y="37" width="0.0187%" height="15" fill="rgb(236,97,10)" fg:x="190198" fg:w="90"/><text x="39.8686%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e49 (235 samples, 0.05%)</title><rect x="39.6405%" y="37" width="0.0490%" height="15" fill="rgb(233,208,19)" fg:x="190303" fg:w="235"/><text x="39.8905%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e59 (152 samples, 0.03%)</title><rect x="39.6993%" y="37" width="0.0317%" height="15" fill="rgb(216,164,2)" fg:x="190585" fg:w="152"/><text x="39.9493%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e5d (1,342 samples, 0.28%)</title><rect x="39.7309%" y="37" width="0.2795%" height="15" fill="rgb(220,129,5)" fg:x="190737" fg:w="1342"/><text x="39.9809%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e63 (519 samples, 0.11%)</title><rect x="40.0105%" y="37" width="0.1081%" height="15" fill="rgb(242,17,10)" fg:x="192079" fg:w="519"/><text x="40.2605%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e67 (8,261 samples, 1.72%)</title><rect x="40.1186%" y="37" width="1.7208%" height="15" fill="rgb(242,107,0)" fg:x="192598" fg:w="8261"/><text x="40.3686%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e6b (1,244 samples, 0.26%)</title><rect x="41.8393%" y="37" width="0.2591%" height="15" fill="rgb(251,28,31)" fg:x="200859" fg:w="1244"/><text x="42.0893%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e6e (50 samples, 0.01%)</title><rect x="42.0985%" y="37" width="0.0104%" height="15" fill="rgb(233,223,10)" fg:x="202103" fg:w="50"/><text x="42.3485%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e79 (503 samples, 0.10%)</title><rect x="42.1099%" y="37" width="0.1048%" height="15" fill="rgb(215,21,27)" fg:x="202158" fg:w="503"/><text x="42.3599%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e7c (49 samples, 0.01%)</title><rect x="42.2147%" y="37" width="0.0102%" height="15" fill="rgb(232,23,21)" fg:x="202661" fg:w="49"/><text x="42.4647%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e84 (2,170 samples, 0.45%)</title><rect x="42.2249%" y="37" width="0.4520%" height="15" fill="rgb(244,5,23)" fg:x="202710" fg:w="2170"/><text x="42.4749%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e86 (199 samples, 0.04%)</title><rect x="42.6769%" y="37" width="0.0415%" height="15" fill="rgb(226,81,46)" fg:x="204880" fg:w="199"/><text x="42.9269%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e89 (478 samples, 0.10%)</title><rect x="42.7184%" y="37" width="0.0996%" height="15" fill="rgb(247,70,30)" fg:x="205079" fg:w="478"/><text x="42.9684%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e93 (493 samples, 0.10%)</title><rect x="42.8280%" y="37" width="0.1027%" height="15" fill="rgb(212,68,19)" fg:x="205605" fg:w="493"/><text x="43.0780%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e9a (1,732 samples, 0.36%)</title><rect x="42.9396%" y="37" width="0.3608%" height="15" fill="rgb(240,187,13)" fg:x="206141" fg:w="1732"/><text x="43.1896%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e9d (191 samples, 0.04%)</title><rect x="43.3004%" y="37" width="0.0398%" height="15" fill="rgb(223,113,26)" fg:x="207873" fg:w="191"/><text x="43.5504%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ebb (503 samples, 0.10%)</title><rect x="43.3420%" y="37" width="0.1048%" height="15" fill="rgb(206,192,2)" fg:x="208073" fg:w="503"/><text x="43.5920%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ebe (174 samples, 0.04%)</title><rect x="43.4468%" y="37" width="0.0362%" height="15" fill="rgb(241,108,4)" fg:x="208576" fg:w="174"/><text x="43.6968%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ec2 (338 samples, 0.07%)</title><rect x="43.4831%" y="37" width="0.0704%" height="15" fill="rgb(247,173,49)" fg:x="208750" fg:w="338"/><text x="43.7331%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ec5 (532 samples, 0.11%)</title><rect x="43.5535%" y="37" width="0.1108%" height="15" fill="rgb(224,114,35)" fg:x="209088" fg:w="532"/><text x="43.8035%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ec8 (66 samples, 0.01%)</title><rect x="43.6643%" y="37" width="0.0137%" height="15" fill="rgb(245,159,27)" fg:x="209620" fg:w="66"/><text x="43.9143%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ed6 (71 samples, 0.01%)</title><rect x="43.6780%" y="37" width="0.0148%" height="15" fill="rgb(245,172,44)" fg:x="209686" fg:w="71"/><text x="43.9280%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8ee9 (472 samples, 0.10%)</title><rect x="43.6993%" y="37" width="0.0983%" height="15" fill="rgb(236,23,11)" fg:x="209788" fg:w="472"/><text x="43.9493%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8eef (58 samples, 0.01%)</title><rect x="43.7976%" y="37" width="0.0121%" height="15" fill="rgb(205,117,38)" fg:x="210260" fg:w="58"/><text x="44.0476%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8efb (183 samples, 0.04%)</title><rect x="43.8097%" y="37" width="0.0381%" height="15" fill="rgb(237,72,25)" fg:x="210318" fg:w="183"/><text x="44.0597%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f02 (223 samples, 0.05%)</title><rect x="43.8538%" y="37" width="0.0465%" height="15" fill="rgb(244,70,9)" fg:x="210530" fg:w="223"/><text x="44.1038%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f09 (181 samples, 0.04%)</title><rect x="43.9003%" y="37" width="0.0377%" height="15" fill="rgb(217,125,39)" fg:x="210753" fg:w="181"/><text x="44.1503%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f0d (98 samples, 0.02%)</title><rect x="43.9380%" y="37" width="0.0204%" height="15" fill="rgb(235,36,10)" fg:x="210934" fg:w="98"/><text x="44.1880%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f16 (140 samples, 0.03%)</title><rect x="43.9661%" y="37" width="0.0292%" height="15" fill="rgb(251,123,47)" fg:x="211069" fg:w="140"/><text x="44.2161%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f1c (190 samples, 0.04%)</title><rect x="43.9953%" y="37" width="0.0396%" height="15" fill="rgb(221,13,13)" fg:x="211209" fg:w="190"/><text x="44.2453%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f1f (266 samples, 0.06%)</title><rect x="44.0349%" y="37" width="0.0554%" height="15" fill="rgb(238,131,9)" fg:x="211399" fg:w="266"/><text x="44.2849%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f33 (80 samples, 0.02%)</title><rect x="44.0992%" y="37" width="0.0167%" height="15" fill="rgb(211,50,8)" fg:x="211708" fg:w="80"/><text x="44.3492%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f39 (89 samples, 0.02%)</title><rect x="44.1159%" y="37" width="0.0185%" height="15" fill="rgb(245,182,24)" fg:x="211788" fg:w="89"/><text x="44.3659%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f40 (228 samples, 0.05%)</title><rect x="44.1344%" y="37" width="0.0475%" height="15" fill="rgb(242,14,37)" fg:x="211877" fg:w="228"/><text x="44.3844%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f43 (266 samples, 0.06%)</title><rect x="44.1819%" y="37" width="0.0554%" height="15" fill="rgb(246,228,12)" fg:x="212105" fg:w="266"/><text x="44.4319%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f49 (386 samples, 0.08%)</title><rect x="44.2373%" y="37" width="0.0804%" height="15" fill="rgb(213,55,15)" fg:x="212371" fg:w="386"/><text x="44.4873%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f4e (6,629 samples, 1.38%)</title><rect x="44.3177%" y="37" width="1.3808%" height="15" fill="rgb(209,9,3)" fg:x="212757" fg:w="6629"/><text x="44.5677%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f50 (1,292 samples, 0.27%)</title><rect x="45.6986%" y="37" width="0.2691%" height="15" fill="rgb(230,59,30)" fg:x="219386" fg:w="1292"/><text x="45.9486%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f59 (65 samples, 0.01%)</title><rect x="45.9750%" y="37" width="0.0135%" height="15" fill="rgb(209,121,21)" fg:x="220713" fg:w="65"/><text x="46.2250%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f62 (244 samples, 0.05%)</title><rect x="45.9979%" y="37" width="0.0508%" height="15" fill="rgb(220,109,13)" fg:x="220823" fg:w="244"/><text x="46.2479%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f65 (133 samples, 0.03%)</title><rect x="46.0487%" y="37" width="0.0277%" height="15" fill="rgb(232,18,1)" fg:x="221067" fg:w="133"/><text x="46.2987%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f68 (128 samples, 0.03%)</title><rect x="46.0764%" y="37" width="0.0267%" height="15" fill="rgb(215,41,42)" fg:x="221200" fg:w="128"/><text x="46.3264%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f72 (616 samples, 0.13%)</title><rect x="46.1033%" y="37" width="0.1283%" height="15" fill="rgb(224,123,36)" fg:x="221329" fg:w="616"/><text x="46.3533%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f81 (127 samples, 0.03%)</title><rect x="46.2326%" y="37" width="0.0265%" height="15" fill="rgb(240,125,3)" fg:x="221950" fg:w="127"/><text x="46.4826%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f84 (135 samples, 0.03%)</title><rect x="46.2591%" y="37" width="0.0281%" height="15" fill="rgb(205,98,50)" fg:x="222077" fg:w="135"/><text x="46.5091%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f8a (118 samples, 0.02%)</title><rect x="46.2872%" y="37" width="0.0246%" height="15" fill="rgb(205,185,37)" fg:x="222212" fg:w="118"/><text x="46.5372%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8f8f (2,185 samples, 0.46%)</title><rect x="46.3118%" y="37" width="0.4551%" height="15" fill="rgb(238,207,15)" fg:x="222330" fg:w="2185"/><text x="46.5618%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8fe9 (361 samples, 0.08%)</title><rect x="46.7776%" y="37" width="0.0752%" height="15" fill="rgb(213,199,42)" fg:x="224566" fg:w="361"/><text x="47.0276%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b902e (202 samples, 0.04%)</title><rect x="46.8626%" y="37" width="0.0421%" height="15" fill="rgb(235,201,11)" fg:x="224974" fg:w="202"/><text x="47.1126%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b903e (403 samples, 0.08%)</title><rect x="46.9053%" y="37" width="0.0839%" height="15" fill="rgb(207,46,11)" fg:x="225179" fg:w="403"/><text x="47.1553%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b9040 (143 samples, 0.03%)</title><rect x="46.9892%" y="37" width="0.0298%" height="15" fill="rgb(241,35,35)" fg:x="225582" fg:w="143"/><text x="47.2392%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b905f (78 samples, 0.02%)</title><rect x="47.0207%" y="37" width="0.0162%" height="15" fill="rgb(243,32,47)" fg:x="225733" fg:w="78"/><text x="47.2707%" y="47.50"></text></g><g><title>interpack`alloc::raw_vec::finish_grow (38,445 samples, 8.01%)</title><rect x="39.1214%" y="53" width="8.0082%" height="15" fill="rgb(247,202,23)" fg:x="187811" fg:w="38445"/><text x="39.3714%" y="63.50">interpack`a..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154b9067 (445 samples, 0.09%)</title><rect x="47.0369%" y="37" width="0.0927%" height="15" fill="rgb(219,102,11)" fg:x="225811" fg:w="445"/><text x="47.2869%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dd0 (794 samples, 0.17%)</title><rect x="47.1296%" y="53" width="0.1654%" height="15" fill="rgb(243,110,44)" fg:x="226256" fg:w="794"/><text x="47.3796%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dd3 (143 samples, 0.03%)</title><rect x="47.2950%" y="53" width="0.0298%" height="15" fill="rgb(222,74,54)" fg:x="227050" fg:w="143"/><text x="47.5450%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8dda (249 samples, 0.05%)</title><rect x="47.3248%" y="53" width="0.0519%" height="15" fill="rgb(216,99,12)" fg:x="227193" fg:w="249"/><text x="47.5748%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b8e0e (97 samples, 0.02%)</title><rect x="47.3821%" y="53" width="0.0202%" height="15" fill="rgb(226,22,26)" fg:x="227468" fg:w="97"/><text x="47.6321%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154b903f (177 samples, 0.04%)</title><rect x="47.4058%" y="53" width="0.0369%" height="15" fill="rgb(217,163,10)" fg:x="227582" fg:w="177"/><text x="47.6558%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3647 (64 samples, 0.01%)</title><rect x="47.4427%" y="53" width="0.0133%" height="15" fill="rgb(213,25,53)" fg:x="227759" fg:w="64"/><text x="47.6927%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e364e (92 samples, 0.02%)</title><rect x="47.4560%" y="53" width="0.0192%" height="15" fill="rgb(252,105,26)" fg:x="227823" fg:w="92"/><text x="47.7060%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3658 (549 samples, 0.11%)</title><rect x="47.4835%" y="53" width="0.1144%" height="15" fill="rgb(220,39,43)" fg:x="227955" fg:w="549"/><text x="47.7335%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e365a (92 samples, 0.02%)</title><rect x="47.5979%" y="53" width="0.0192%" height="15" fill="rgb(229,68,48)" fg:x="228504" fg:w="92"/><text x="47.8479%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3661 (160 samples, 0.03%)</title><rect x="47.6170%" y="53" width="0.0333%" height="15" fill="rgb(252,8,32)" fg:x="228596" fg:w="160"/><text x="47.8670%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3664 (493 samples, 0.10%)</title><rect x="47.6504%" y="53" width="0.1027%" height="15" fill="rgb(223,20,43)" fg:x="228756" fg:w="493"/><text x="47.9004%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e366b (66 samples, 0.01%)</title><rect x="47.7530%" y="53" width="0.0137%" height="15" fill="rgb(229,81,49)" fg:x="229249" fg:w="66"/><text x="48.0030%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3675 (480 samples, 0.10%)</title><rect x="47.7674%" y="53" width="0.1000%" height="15" fill="rgb(236,28,36)" fg:x="229318" fg:w="480"/><text x="48.0174%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e367b (2,307 samples, 0.48%)</title><rect x="47.8772%" y="53" width="0.4806%" height="15" fill="rgb(249,185,26)" fg:x="229845" fg:w="2307"/><text x="48.1272%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e367d (709 samples, 0.15%)</title><rect x="48.3577%" y="53" width="0.1477%" height="15" fill="rgb(249,174,33)" fg:x="232152" fg:w="709"/><text x="48.6077%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3684 (58 samples, 0.01%)</title><rect x="48.5054%" y="53" width="0.0121%" height="15" fill="rgb(233,201,37)" fg:x="232861" fg:w="58"/><text x="48.7554%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3691 (234 samples, 0.05%)</title><rect x="48.5258%" y="53" width="0.0487%" height="15" fill="rgb(221,78,26)" fg:x="232959" fg:w="234"/><text x="48.7758%" y="63.50"></text></g><g><title>interpack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (49,532 samples, 10.32%)</title><rect x="38.2691%" y="69" width="10.3176%" height="15" fill="rgb(250,127,30)" fg:x="183719" fg:w="49532"/><text x="38.5191%" y="79.50">interpack`alloc..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154e3696 (58 samples, 0.01%)</title><rect x="48.5746%" y="53" width="0.0121%" height="15" fill="rgb(230,49,44)" fg:x="233193" fg:w="58"/><text x="48.8246%" y="63.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (53,014 samples, 11.04%)</title><rect x="37.6558%" y="101" width="11.0429%" height="15" fill="rgb(229,67,23)" fg:x="180775" fg:w="53014"/><text x="37.9058%" y="111.50">interpack`&lt;alloc..</text></g><g><title>interpack`alloc::string::String::push (52,448 samples, 10.93%)</title><rect x="37.7737%" y="85" width="10.9250%" height="15" fill="rgb(249,83,47)" fg:x="181341" fg:w="52448"/><text x="38.0237%" y="95.50">interpack`alloc:..</text></g><g><title>interpack`alloc::raw_vec::finish_grow (538 samples, 0.11%)</title><rect x="48.5867%" y="69" width="0.1121%" height="15" fill="rgb(215,43,3)" fg:x="233251" fg:w="538"/><text x="48.8367%" y="79.50"></text></g><g><title>interpack`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3,111 samples, 0.65%)</title><rect x="48.6987%" y="101" width="0.6480%" height="15" fill="rgb(238,154,13)" fg:x="233789" fg:w="3111"/><text x="48.9487%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,258 samples, 0.26%)</title><rect x="49.0847%" y="85" width="0.2620%" height="15" fill="rgb(219,56,2)" fg:x="235642" fg:w="1258"/><text x="49.3347%" y="95.50"></text></g><g><title>interpack`DYLD-STUB$$memcpy (507 samples, 0.11%)</title><rect x="49.3468%" y="101" width="0.1056%" height="15" fill="rgb(233,0,4)" fg:x="236900" fg:w="507"/><text x="49.5968%" y="111.50"></text></g><g><title>interpack`alloc::string::String::push (1,113 samples, 0.23%)</title><rect x="49.4524%" y="101" width="0.2318%" height="15" fill="rgb(235,30,7)" fg:x="237407" fg:w="1113"/><text x="49.7024%" y="111.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral::write_prefix (3,694 samples, 0.77%)</title><rect x="49.6842%" y="101" width="0.7695%" height="15" fill="rgb(250,79,13)" fg:x="238520" fg:w="3694"/><text x="49.9342%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (82 samples, 0.02%)</title><rect x="50.4537%" y="101" width="0.0171%" height="15" fill="rgb(211,146,34)" fg:x="242214" fg:w="82"/><text x="50.7037%" y="111.50"></text></g><g><title>interpack`core::fmt::Formatter::pad_integral (61,679 samples, 12.85%)</title><rect x="37.6558%" y="117" width="12.8479%" height="15" fill="rgb(228,22,38)" fg:x="180775" fg:w="61679"/><text x="37.9058%" y="127.50">interpack`core::fmt..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (158 samples, 0.03%)</title><rect x="50.4708%" y="101" width="0.0329%" height="15" fill="rgb(235,168,5)" fg:x="242296" fg:w="158"/><text x="50.7208%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (74 samples, 0.02%)</title><rect x="50.5037%" y="117" width="0.0154%" height="15" fill="rgb(221,155,16)" fg:x="242454" fg:w="74"/><text x="50.7537%" y="127.50"></text></g><g><title>interpack`alloc::fmt::format::format_inner (158,570 samples, 33.03%)</title><rect x="17.5557%" y="165" width="33.0305%" height="15" fill="rgb(215,215,53)" fg:x="84280" fg:w="158570"/><text x="17.8057%" y="175.50">interpack`alloc::fmt::format::format_inner</text></g><g><title>interpack`core::fmt::write (147,974 samples, 30.82%)</title><rect x="19.7629%" y="149" width="30.8233%" height="15" fill="rgb(223,4,10)" fg:x="94876" fg:w="147974"/><text x="20.0129%" y="159.50">interpack`core::fmt::write</text></g><g><title>interpack`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (133,012 samples, 27.71%)</title><rect x="22.8795%" y="133" width="27.7067%" height="15" fill="rgb(234,103,6)" fg:x="109838" fg:w="133012"/><text x="23.1295%" y="143.50">interpack`core::fmt::num::_&lt;impl core::fmt::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (322 samples, 0.07%)</title><rect x="50.5191%" y="117" width="0.0671%" height="15" fill="rgb(227,97,0)" fg:x="242528" fg:w="322"/><text x="50.7691%" y="127.50"></text></g><g><title>interpack`core::fmt::write (1,363 samples, 0.28%)</title><rect x="50.5862%" y="165" width="0.2839%" height="15" fill="rgb(234,150,53)" fg:x="242850" fg:w="1363"/><text x="50.8362%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (69,106 samples, 14.39%)</title><rect x="50.9878%" y="149" width="14.3949%" height="15" fill="rgb(228,201,54)" fg:x="244778" fg:w="69106"/><text x="51.2378%" y="159.50">libsystem_kernel.dylib..</text></g><g><title>interpack`memmap2::os::MmapInner::map (70,630 samples, 14.71%)</title><rect x="50.8701%" y="165" width="14.7124%" height="15" fill="rgb(222,22,37)" fg:x="244213" fg:w="70630"/><text x="51.1201%" y="175.50">interpack`memmap2::os:..</text></g><g><title>libsystem_kernel.dylib`mmap (959 samples, 0.20%)</title><rect x="65.3827%" y="149" width="0.1998%" height="15" fill="rgb(237,53,32)" fg:x="313884" fg:w="959"/><text x="65.6327%" y="159.50"></text></g><g><title>interpack`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2,299 samples, 0.48%)</title><rect x="65.5875%" y="149" width="0.4789%" height="15" fill="rgb(233,25,53)" fg:x="314867" fg:w="2299"/><text x="65.8375%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (2,297 samples, 0.48%)</title><rect x="65.5879%" y="133" width="0.4785%" height="15" fill="rgb(210,40,34)" fg:x="314869" fg:w="2297"/><text x="65.8379%" y="143.50"></text></g><g><title>interpack`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2,321 samples, 0.48%)</title><rect x="65.5835%" y="165" width="0.4835%" height="15" fill="rgb(241,220,44)" fg:x="314848" fg:w="2321"/><text x="65.8335%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mmap (247 samples, 0.05%)</title><rect x="66.0670%" y="165" width="0.0515%" height="15" fill="rgb(235,28,35)" fg:x="317169" fg:w="247"/><text x="66.3170%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da306 (168 samples, 0.03%)</title><rect x="66.1305%" y="165" width="0.0350%" height="15" fill="rgb(210,56,17)" fg:x="317474" fg:w="168"/><text x="66.3805%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da308 (300 samples, 0.06%)</title><rect x="66.1655%" y="165" width="0.0625%" height="15" fill="rgb(224,130,29)" fg:x="317642" fg:w="300"/><text x="66.4155%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da30a (390 samples, 0.08%)</title><rect x="66.2280%" y="165" width="0.0812%" height="15" fill="rgb(235,212,8)" fg:x="317942" fg:w="390"/><text x="66.4780%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da30e (81 samples, 0.02%)</title><rect x="66.3223%" y="165" width="0.0169%" height="15" fill="rgb(223,33,50)" fg:x="318395" fg:w="81"/><text x="66.5723%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da316 (150 samples, 0.03%)</title><rect x="66.3407%" y="165" width="0.0312%" height="15" fill="rgb(219,149,13)" fg:x="318483" fg:w="150"/><text x="66.5907%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da31f (305 samples, 0.06%)</title><rect x="66.3719%" y="165" width="0.0635%" height="15" fill="rgb(250,156,29)" fg:x="318633" fg:w="305"/><text x="66.6219%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da329 (371 samples, 0.08%)</title><rect x="66.4355%" y="165" width="0.0773%" height="15" fill="rgb(216,193,19)" fg:x="318938" fg:w="371"/><text x="66.6855%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da33f (83 samples, 0.02%)</title><rect x="66.5252%" y="165" width="0.0173%" height="15" fill="rgb(216,135,14)" fg:x="319369" fg:w="83"/><text x="66.7752%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da346 (206 samples, 0.04%)</title><rect x="66.5425%" y="165" width="0.0429%" height="15" fill="rgb(241,47,5)" fg:x="319452" fg:w="206"/><text x="66.7925%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da34d (51 samples, 0.01%)</title><rect x="66.5854%" y="165" width="0.0106%" height="15" fill="rgb(233,42,35)" fg:x="319658" fg:w="51"/><text x="66.8354%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da356 (159 samples, 0.03%)</title><rect x="66.5965%" y="165" width="0.0331%" height="15" fill="rgb(231,13,6)" fg:x="319711" fg:w="159"/><text x="66.8465%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da35f (286 samples, 0.06%)</title><rect x="66.6296%" y="165" width="0.0596%" height="15" fill="rgb(207,181,40)" fg:x="319870" fg:w="286"/><text x="66.8796%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da365 (351 samples, 0.07%)</title><rect x="66.6892%" y="165" width="0.0731%" height="15" fill="rgb(254,173,49)" fg:x="320156" fg:w="351"/><text x="66.9392%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da3fa (77 samples, 0.02%)</title><rect x="66.7737%" y="165" width="0.0160%" height="15" fill="rgb(221,1,38)" fg:x="320562" fg:w="77"/><text x="67.0237%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da3ff (109 samples, 0.02%)</title><rect x="66.7898%" y="165" width="0.0227%" height="15" fill="rgb(206,124,46)" fg:x="320639" fg:w="109"/><text x="67.0398%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da407 (165 samples, 0.03%)</title><rect x="66.8173%" y="165" width="0.0344%" height="15" fill="rgb(249,21,11)" fg:x="320771" fg:w="165"/><text x="67.0673%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da40a (395 samples, 0.08%)</title><rect x="66.8516%" y="165" width="0.0823%" height="15" fill="rgb(222,201,40)" fg:x="320936" fg:w="395"/><text x="67.1016%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da411 (383 samples, 0.08%)</title><rect x="66.9339%" y="165" width="0.0798%" height="15" fill="rgb(235,61,29)" fg:x="321331" fg:w="383"/><text x="67.1839%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da415 (1,594 samples, 0.33%)</title><rect x="67.0137%" y="165" width="0.3320%" height="15" fill="rgb(219,207,3)" fg:x="321714" fg:w="1594"/><text x="67.2637%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da418 (184 samples, 0.04%)</title><rect x="67.3457%" y="165" width="0.0383%" height="15" fill="rgb(222,56,46)" fg:x="323308" fg:w="184"/><text x="67.5957%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da42c (138 samples, 0.03%)</title><rect x="67.3855%" y="165" width="0.0287%" height="15" fill="rgb(239,76,54)" fg:x="323499" fg:w="138"/><text x="67.6355%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da437 (81 samples, 0.02%)</title><rect x="67.4153%" y="165" width="0.0169%" height="15" fill="rgb(231,124,27)" fg:x="323642" fg:w="81"/><text x="67.6653%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da43a (677 samples, 0.14%)</title><rect x="67.4322%" y="165" width="0.1410%" height="15" fill="rgb(249,195,6)" fg:x="323723" fg:w="677"/><text x="67.6822%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da43e (356 samples, 0.07%)</title><rect x="67.5732%" y="165" width="0.0742%" height="15" fill="rgb(237,174,47)" fg:x="324400" fg:w="356"/><text x="67.8232%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da440 (563 samples, 0.12%)</title><rect x="67.6474%" y="165" width="0.1173%" height="15" fill="rgb(206,201,31)" fg:x="324756" fg:w="563"/><text x="67.8974%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da446 (633 samples, 0.13%)</title><rect x="67.7646%" y="165" width="0.1319%" height="15" fill="rgb(231,57,52)" fg:x="325319" fg:w="633"/><text x="68.0146%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da44e (807 samples, 0.17%)</title><rect x="67.8965%" y="165" width="0.1681%" height="15" fill="rgb(248,177,22)" fg:x="325952" fg:w="807"/><text x="68.1465%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da452 (697 samples, 0.15%)</title><rect x="68.0646%" y="165" width="0.1452%" height="15" fill="rgb(215,211,37)" fg:x="326759" fg:w="697"/><text x="68.3146%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da45a (565 samples, 0.12%)</title><rect x="68.2098%" y="165" width="0.1177%" height="15" fill="rgb(241,128,51)" fg:x="327456" fg:w="565"/><text x="68.4598%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da462 (399 samples, 0.08%)</title><rect x="68.3275%" y="165" width="0.0831%" height="15" fill="rgb(227,165,31)" fg:x="328021" fg:w="399"/><text x="68.5775%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da46f (82 samples, 0.02%)</title><rect x="68.4106%" y="165" width="0.0171%" height="15" fill="rgb(228,167,24)" fg:x="328420" fg:w="82"/><text x="68.6606%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da477 (170 samples, 0.04%)</title><rect x="68.4329%" y="165" width="0.0354%" height="15" fill="rgb(228,143,12)" fg:x="328527" fg:w="170"/><text x="68.6829%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da47e (343 samples, 0.07%)</title><rect x="68.4683%" y="165" width="0.0714%" height="15" fill="rgb(249,149,8)" fg:x="328697" fg:w="343"/><text x="68.7183%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da482 (479 samples, 0.10%)</title><rect x="68.5397%" y="165" width="0.0998%" height="15" fill="rgb(243,35,44)" fg:x="329040" fg:w="479"/><text x="68.7897%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da484 (423 samples, 0.09%)</title><rect x="68.6395%" y="165" width="0.0881%" height="15" fill="rgb(246,89,9)" fg:x="329519" fg:w="423"/><text x="68.8895%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da488 (486 samples, 0.10%)</title><rect x="68.7276%" y="165" width="0.1012%" height="15" fill="rgb(233,213,13)" fg:x="329942" fg:w="486"/><text x="68.9776%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da48b (75 samples, 0.02%)</title><rect x="68.8288%" y="165" width="0.0156%" height="15" fill="rgb(233,141,41)" fg:x="330428" fg:w="75"/><text x="69.0788%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da496 (51 samples, 0.01%)</title><rect x="68.8482%" y="165" width="0.0106%" height="15" fill="rgb(239,167,4)" fg:x="330521" fg:w="51"/><text x="69.0982%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da499 (280 samples, 0.06%)</title><rect x="68.8588%" y="165" width="0.0583%" height="15" fill="rgb(209,217,16)" fg:x="330572" fg:w="280"/><text x="69.1088%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4a0 (113 samples, 0.02%)</title><rect x="68.9222%" y="165" width="0.0235%" height="15" fill="rgb(219,88,35)" fg:x="330876" fg:w="113"/><text x="69.1722%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4a3 (13,281 samples, 2.77%)</title><rect x="68.9457%" y="165" width="2.7665%" height="15" fill="rgb(220,193,23)" fg:x="330989" fg:w="13281"/><text x="69.1957%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4d3 (2,245 samples, 0.47%)</title><rect x="71.7122%" y="165" width="0.4676%" height="15" fill="rgb(230,90,52)" fg:x="344270" fg:w="2245"/><text x="71.9622%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4d6 (103 samples, 0.02%)</title><rect x="72.1798%" y="165" width="0.0215%" height="15" fill="rgb(252,106,19)" fg:x="346515" fg:w="103"/><text x="72.4298%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4f5 (880 samples, 0.18%)</title><rect x="72.2050%" y="165" width="0.1833%" height="15" fill="rgb(206,74,20)" fg:x="346636" fg:w="880"/><text x="72.4550%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da4f7 (84 samples, 0.02%)</title><rect x="72.3883%" y="165" width="0.0175%" height="15" fill="rgb(230,138,44)" fg:x="347516" fg:w="84"/><text x="72.6383%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da52a (868 samples, 0.18%)</title><rect x="72.4100%" y="165" width="0.1808%" height="15" fill="rgb(235,182,43)" fg:x="347620" fg:w="868"/><text x="72.6600%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da52d (83 samples, 0.02%)</title><rect x="72.5908%" y="165" width="0.0173%" height="15" fill="rgb(242,16,51)" fg:x="348488" fg:w="83"/><text x="72.8408%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da54d (923 samples, 0.19%)</title><rect x="72.6122%" y="165" width="0.1923%" height="15" fill="rgb(248,9,4)" fg:x="348591" fg:w="923"/><text x="72.8622%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da554 (114 samples, 0.02%)</title><rect x="72.8045%" y="165" width="0.0237%" height="15" fill="rgb(210,31,22)" fg:x="349514" fg:w="114"/><text x="73.0545%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da578 (828 samples, 0.17%)</title><rect x="72.8337%" y="165" width="0.1725%" height="15" fill="rgb(239,54,39)" fg:x="349654" fg:w="828"/><text x="73.0837%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da57c (88 samples, 0.02%)</title><rect x="73.0061%" y="165" width="0.0183%" height="15" fill="rgb(230,99,41)" fg:x="350482" fg:w="88"/><text x="73.2561%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da59a (672 samples, 0.14%)</title><rect x="73.0278%" y="165" width="0.1400%" height="15" fill="rgb(253,106,12)" fg:x="350586" fg:w="672"/><text x="73.2778%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da59e (78 samples, 0.02%)</title><rect x="73.1678%" y="165" width="0.0162%" height="15" fill="rgb(213,46,41)" fg:x="351258" fg:w="78"/><text x="73.4178%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5ad (12,437 samples, 2.59%)</title><rect x="73.1853%" y="165" width="2.5907%" height="15" fill="rgb(215,133,35)" fg:x="351342" fg:w="12437"/><text x="73.4353%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5c0 (255 samples, 0.05%)</title><rect x="75.7778%" y="165" width="0.0531%" height="15" fill="rgb(213,28,5)" fg:x="363788" fg:w="255"/><text x="76.0278%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5ca (118 samples, 0.02%)</title><rect x="75.8320%" y="165" width="0.0246%" height="15" fill="rgb(215,77,49)" fg:x="364048" fg:w="118"/><text x="76.0820%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5db (88 samples, 0.02%)</title><rect x="75.8617%" y="165" width="0.0183%" height="15" fill="rgb(248,100,22)" fg:x="364191" fg:w="88"/><text x="76.1117%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5e3 (4,238 samples, 0.88%)</title><rect x="75.8830%" y="165" width="0.8828%" height="15" fill="rgb(208,67,9)" fg:x="364293" fg:w="4238"/><text x="76.1330%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da5ec (2,413 samples, 0.50%)</title><rect x="76.7658%" y="165" width="0.5026%" height="15" fill="rgb(219,133,21)" fg:x="368531" fg:w="2413"/><text x="77.0158%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da61a (365 samples, 0.08%)</title><rect x="77.2684%" y="165" width="0.0760%" height="15" fill="rgb(246,46,29)" fg:x="370944" fg:w="365"/><text x="77.5184%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da66d (690 samples, 0.14%)</title><rect x="77.3530%" y="165" width="0.1437%" height="15" fill="rgb(246,185,52)" fg:x="371350" fg:w="690"/><text x="77.6030%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da66f (331 samples, 0.07%)</title><rect x="77.4967%" y="165" width="0.0689%" height="15" fill="rgb(252,136,11)" fg:x="372040" fg:w="331"/><text x="77.7467%" y="175.50"></text></g><g><title>interpack`&lt;interpack::huffman_encode::Writer as interpack::util::memory_map::LineByLine&gt;::line_by_line (372,373 samples, 77.57%)</title><rect x="0.0000%" y="181" width="77.5661%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="372373"/><text x="0.2500%" y="191.50">interpack`&lt;interpack::huffman_encode::Writer as interpack::util::memory_map::LineByLine&gt;::line_by_line</text></g><g><title>interpack`DYLD-STUB$$free (483 samples, 0.10%)</title><rect x="77.5727%" y="181" width="0.1006%" height="15" fill="rgb(211,51,23)" fg:x="372405" fg:w="483"/><text x="77.8227%" y="191.50"></text></g><g><title>interpack`__rdl_dealloc (3,442 samples, 0.72%)</title><rect x="77.6733%" y="181" width="0.7170%" height="15" fill="rgb(247,221,28)" fg:x="372888" fg:w="3442"/><text x="77.9233%" y="191.50"></text></g><g><title>interpack`__rust_dealloc (1,015 samples, 0.21%)</title><rect x="78.3903%" y="181" width="0.2114%" height="15" fill="rgb(251,222,45)" fg:x="376330" fg:w="1015"/><text x="78.6403%" y="191.50"></text></g><g><title>interpack`alloc::fmt::format::format_inner (1,511 samples, 0.31%)</title><rect x="78.6018%" y="181" width="0.3147%" height="15" fill="rgb(217,162,53)" fg:x="377345" fg:w="1511"/><text x="78.8518%" y="191.50"></text></g><g><title>interpack`memmap2::os::MmapInner::map (299 samples, 0.06%)</title><rect x="78.9165%" y="181" width="0.0623%" height="15" fill="rgb(229,93,14)" fg:x="378856" fg:w="299"/><text x="79.1665%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (91,378 samples, 19.03%)</title><rect x="78.9798%" y="181" width="19.0342%" height="15" fill="rgb(209,67,49)" fg:x="379160" fg:w="91378"/><text x="79.2298%" y="191.50">libsystem_kernel.dylib`__munmap</text></g><g><title>libsystem_malloc.dylib`0x7ff8154b988d (762 samples, 0.16%)</title><rect x="98.0163%" y="181" width="0.1587%" height="15" fill="rgb(213,87,29)" fg:x="470549" fg:w="762"/><text x="98.2663%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da301 (127 samples, 0.03%)</title><rect x="98.1792%" y="181" width="0.0265%" height="15" fill="rgb(205,151,52)" fg:x="471331" fg:w="127"/><text x="98.4292%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da671 (465 samples, 0.10%)</title><rect x="98.2084%" y="181" width="0.0969%" height="15" fill="rgb(253,215,39)" fg:x="471471" fg:w="465"/><text x="98.4584%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154da676 (55 samples, 0.01%)</title><rect x="98.3053%" y="181" width="0.0115%" height="15" fill="rgb(221,220,41)" fg:x="471936" fg:w="55"/><text x="98.5553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40e0 (349 samples, 0.07%)</title><rect x="98.3167%" y="181" width="0.0727%" height="15" fill="rgb(218,133,21)" fg:x="471991" fg:w="349"/><text x="98.5667%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40e5 (73 samples, 0.02%)</title><rect x="98.3894%" y="181" width="0.0152%" height="15" fill="rgb(221,193,43)" fg:x="472340" fg:w="73"/><text x="98.6394%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40ef (443 samples, 0.09%)</title><rect x="98.4057%" y="181" width="0.0923%" height="15" fill="rgb(240,128,52)" fg:x="472418" fg:w="443"/><text x="98.6557%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40f1 (60 samples, 0.01%)</title><rect x="98.4979%" y="181" width="0.0125%" height="15" fill="rgb(253,114,12)" fg:x="472861" fg:w="60"/><text x="98.7479%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40f9 (510 samples, 0.11%)</title><rect x="98.5104%" y="181" width="0.1062%" height="15" fill="rgb(215,223,47)" fg:x="472921" fg:w="510"/><text x="98.7604%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e40fb (443 samples, 0.09%)</title><rect x="98.6167%" y="181" width="0.0923%" height="15" fill="rgb(248,225,23)" fg:x="473431" fg:w="443"/><text x="98.8667%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4102 (51 samples, 0.01%)</title><rect x="98.7089%" y="181" width="0.0106%" height="15" fill="rgb(250,108,0)" fg:x="473874" fg:w="51"/><text x="98.9589%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4105 (580 samples, 0.12%)</title><rect x="98.7196%" y="181" width="0.1208%" height="15" fill="rgb(228,208,7)" fg:x="473925" fg:w="580"/><text x="98.9696%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4109 (3,408 samples, 0.71%)</title><rect x="98.8404%" y="181" width="0.7099%" height="15" fill="rgb(244,45,10)" fg:x="474505" fg:w="3408"/><text x="99.0904%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e410b (1,153 samples, 0.24%)</title><rect x="99.5503%" y="181" width="0.2402%" height="15" fill="rgb(207,125,25)" fg:x="477913" fg:w="1153"/><text x="99.8003%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4112 (117 samples, 0.02%)</title><rect x="99.7904%" y="181" width="0.0244%" height="15" fill="rgb(210,195,18)" fg:x="479066" fg:w="117"/><text x="100.0404%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4122 (240 samples, 0.05%)</title><rect x="99.8148%" y="181" width="0.0500%" height="15" fill="rgb(249,80,12)" fg:x="479183" fg:w="240"/><text x="100.0648%" y="191.50"></text></g><g><title>all (480,072 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="480072"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld`start (480,072 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="480072"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>interpack`main (480,072 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="480072"/><text x="0.2500%" y="271.50">interpack`main</text></g><g><title>interpack`std::rt::lang_start_internal (480,072 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,141,46)" fg:x="0" fg:w="480072"/><text x="0.2500%" y="255.50">interpack`std::rt::lang_start_internal</text></g><g><title>interpack`std::rt::lang_start::_{{closure}} (480,072 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="480072"/><text x="0.2500%" y="239.50">interpack`std::rt::lang_start::_{{closure}}</text></g><g><title>interpack`std::sys_common::backtrace::__rust_begin_short_backtrace (480,072 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="480072"/><text x="0.2500%" y="223.50">interpack`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>interpack`interpack::main (480,072 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="480072"/><text x="0.2500%" y="207.50">interpack`interpack::main</text></g><g><title>libsystem_malloc.dylib`0x7ff8154e4127 (649 samples, 0.14%)</title><rect x="99.8648%" y="181" width="0.1352%" height="15" fill="rgb(207,178,40)" fg:x="479423" fg:w="649"/><text x="100.1148%" y="191.50"></text></g></svg></svg>